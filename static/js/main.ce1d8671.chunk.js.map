{"version":3,"sources":["cmps/Navbar.js","services/WeatherService.js","store/actions/weatherActions.js","services/LocationService.js","services/utilService.js","store/actions/locationActions.js","cmps/Filter.js","cmps/SingleDaySummary.js","cmps/Home.js","store/actions/settingActions.js","cmps/SingleFavoriteItem.js","cmps/FavoriteList.js","cmps/Favorites.js","App.js","serviceWorker.js","store/reducers/locationReducer.js","store/reducers/weatherReducer.js","store/reducers/settingReducer.js","store/reducers/rootReducer.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","react_router_dom","to","WeatherService","cityId","arguments","length","undefined","query","concat","Axios","get","then","result","data","catch","error","isDayTime","IsDayTime","weatherIcon","WeatherIcon","weatherDescription","WeatherText","temperatureImperialVal","Temperature","Imperial","Value","temperatureImperialUnit","Unit","temperatureMetricVal","Metric","temperatureMetricUnit","getWeather","isCurrent","dispatch","getState","weather","type","LocationService","cityName","utilService","saveToStorage","loadFromStorage","formatTime","time","hour","Date","getHours","minute","getMinutes","seconds","getSeconds","day","getDate","month","getMonth","year","getFullYear","_pad","key","value","str","JSON","stringify","localStorage","setItem","getItem","parse","n","getCityInfo","isFavorite","cities","optionalCities","forEach","city","LocalizedName","Country","cityInfo","Key","countryName","toggleFavoriteStatus","Filter","handleChange","e","_this","target","_this2","this","autocomplete","document","getElementById","M","Autocomplete","init","onAutocomplete","val","index","indexOf","substring","console","log","instance","getInstance","updateData","onSubmit","handleSubmit","id","onChange","htmlFor","Component","connect","state","location","SingleDaySummary","maxImperialVal","Maximum","maxMetricVal","Math","round","toCelsius","minImperialVal","Minimum","minMetriclVal","ImperialUnit","dayIcon","Day","Icon","nightIcon","Night","DAY_URL","NIGHT_URL","isCelsius","scale","isFahrenheit","fahrenheit","getDay","src","title","IconPhrase","alt","Home","handleToggleFavorite","_getCurrentCity","citiesInfo","handleToggleScale","toggleScale","handleToggleTheme","toggleTheme","isFavoritesLoaded","loadFavoritesFromStorage","selectedId","match","params","find","favoriteList","favoriteCity","defaultCityName","prevProps","prevState","cityInfoPrev","filter","cityInfoCurrent","getForcast","locationError","notify","weatherError","currentCity","msg","toast","_this3","currentWeather","CURRENT_WEATHER_URL","forcast","forcastDescription","dayList","map","cmps_SingleDaySummary","isCurrentCelsius","toggleAddFavorite","isCurrentFavorite","colorIsFavorite","color","theme","mainContainer","fontColor","cmps_Filter","style","onClick","favorites","setting","currentScale","currentTheme","SingleFavoriteItem","composedInfo","FavoriteList","favoritesInfo","push","favoritesInfoToRender","cmps_SingleFavoriteItem","Favorites","favoriteCityName","themeColor","background","cmps_FavoriteList","App","basename","process","react_toastify","cmps_Navbar","react_router","exact","path","component","Boolean","window","hostname","initState","locationReducer","action","Object","objectSpread","toConsumableArray","selectedCity","favoriteNames","cityIndex","splice","weatherReducer","DailyForecasts","Headline","Text","weatherList","isExists","updatedWeather","settingReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce1d8671.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className=\"blue darken-2\">\r\n            <div className=\"border-black\">\r\n                <Link to=\"/\" className=\"left brand\">iWeather</Link>\r\n                <ul className=\"right nav-links\">\r\n                    <li><NavLink to=\"/\">Home</NavLink></li>\r\n                    <li><NavLink to=\"/favorites\">Favorites</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import Axios from \"axios\";\r\n\r\nconst getForcast = (cityId = '215854', dispatch) => {\r\n    const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    const FORCAST_URL = 'https://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n    const query = `${FORCAST_URL}${cityId}?apikey=${WEATHER_API_KEY} `;\r\n\r\n    return Axios.get(query)\r\n        .then(result => {            \r\n            return result.data\r\n        })\r\n        .catch(error => {            \r\n            throw error\r\n        })\r\n}\r\nconst getWeather = (cityId = '215854') => {\r\n    const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    const WEATHER_URL = 'https://dataservice.accuweather.com/currentconditions/v1/';\r\n    const query = `${WEATHER_URL}${cityId}?apikey=${WEATHER_API_KEY} `;\r\n\r\n    return Axios.get(query)\r\n        .then(result => {\r\n            let weather = {\r\n                isDayTime: result.data[0].IsDayTime,\r\n                weatherIcon: result.data[0].WeatherIcon,\r\n                weatherDescription: result.data[0].WeatherText,\r\n                temperatureImperialVal: result.data[0].Temperature.Imperial.Value,\r\n                temperatureImperialUnit: result.data[0].Temperature.Imperial.Unit,\r\n                temperatureMetricVal: result.data[0].Temperature.Metric.Value,\r\n                temperatureMetricUnit: result.data[0].Temperature.Metric.Unit,\r\n            }            \r\n            return weather\r\n        })\r\n        .catch(error => {            \r\n            throw error\r\n        })\r\n}\r\n\r\nexport default {\r\n    getForcast,\r\n    getWeather\r\n}","import WeatherService from '../../services/WeatherService'\r\n\r\nexport const getForcast = (cityId) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getForcast(cityId,dispatch)\r\n            .then(forcast => {                \r\n                dispatch({ type: 'SET_FORCAST', forcast })\r\n            })\r\n            .catch(error => {                \r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getWeather = (cityId, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getWeather(cityId)\r\n            .then(weather => {\r\n                weather.cityId = cityId;\r\n                weather.isCurrent = isCurrent;                \r\n                dispatch({ type: 'SET_WEATHER', weather })\r\n            })\r\n            .catch(error => {                \r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}","import Axios from \"axios\";\r\n\r\nconst getCityInfoByName = (cityName) => {\r\n  const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII'\r\n  const LOCATION_AUTO_COMPLETE_BASE = 'https://dataservice.accuweather.com/locations/v1/cities/autocomplete'\r\n  const query = `${LOCATION_AUTO_COMPLETE_BASE}?apikey=${WEATHER_API_KEY}&q=${cityName} `\r\n\r\n  return Axios.get(query)\r\n    .then(result => {\r\n      return result.data;\r\n    })\r\n    .catch(error => {\r\n      throw error\r\n    })\r\n}\r\n\r\nexport default {\r\n  getCityInfoByName\r\n}","\r\nexport default {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    formatTime\r\n}\r\n\r\nexport function saveToStorage(key, value) {\r\n    var str = JSON.stringify(value);\r\n    localStorage.setItem(key, str);\r\n}\r\n\r\nexport function loadFromStorage(key) {\r\n    var str = localStorage.getItem(key);\r\n    if (!str) return undefined;\r\n    return JSON.parse(str);\r\n}\r\n\r\nfunction formatTime(time){\r\n    var hour = new Date(time).getHours();\r\n    //hour += 2; //offset\r\n    var minute = new Date(time).getMinutes();\r\n    var seconds = new Date(time).getSeconds();\r\n    var day = new Date(time).getDate();\r\n    var month = new Date(time).getMonth() + 1;\r\n    var year = new Date(time).getFullYear();\r\n    return day + '/' + month + '/' + year + '  ' + _pad(hour) + ':' + _pad(minute) + ':' + _pad(seconds);\r\n}\r\nfunction _pad(n) {\r\n    return n < 10 ? '0' + n : n;\r\n}","import LocationService from '../../services/LocationService'\r\nimport { loadFromStorage } from '../../services/utilService'\r\n\r\nexport const getCityInfo = (cityName, isFavorite, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        LocationService.getCityInfoByName(cityName)\r\n            .then(cities => {\r\n                //creating options of cities for the filter autocomplete \r\n                let optionalCities = {};\r\n                cities.forEach(city => {\r\n                    optionalCities[city.LocalizedName + ',' + city.Country.LocalizedName] = null;\r\n                })\r\n                dispatch({ type: 'SET_CITIES_OPTIONS', optionalCities })\r\n\r\n                //create the city to be rendered\r\n                let city = cities[0];\r\n                let cityInfo = {\r\n                    cityId: city.Key,\r\n                    cityName: city.LocalizedName,\r\n                    countryName: city.Country.LocalizedName,\r\n                    isCurrent,\r\n                    isFavorite\r\n                };\r\n                dispatch({ type: 'SET_CITY_INFO', cityInfo })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'LOCATION_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const toggleFavoriteStatus = (cityId) => {\r\n    return { type: 'TOGGLE_FAVORITE_STATUS', cityId }\r\n}\r\n\r\nexport const loadFavoritesFromStorage = () => {\r\n    return (dispatch, getState) => {\r\n        //async code - accessing location service\r\n        let favorites = loadFromStorage('favorites')\r\n        if (!favorites) favorites = [];\r\n        dispatch({ type: 'LOAD_FAVORITES_FROM_STORAGE', favorites })\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCityInfo } from '../store/actions/locationActions'\r\n// Import Materialize\r\nimport M from \"materialize-css\";\r\n\r\nclass Filter extends Component {\r\n    componentDidMount() {\r\n        let autocomplete = document.getElementById('autocomplete-input');\r\n        let instance = M.Autocomplete.init(autocomplete, {\r\n            data: this.props.optionalCities, onAutocomplete: (val) => {\r\n                let index = val.indexOf(',')\r\n                let result = val.substring(0, index)\r\n                this.props.getCityInfo(result, false, true);\r\n            }\r\n        });\r\n    }\r\n    handleChange = (e) => {\r\n        this.props.getCityInfo(e.target.value, false, true);\r\n    }\r\n    render() {\r\n        console.log('rendering...')\r\n        console.log(this.props.optionalCities)\r\n        let autocomplete = document.getElementById('autocomplete-input');\r\n        if (autocomplete) {\r\n            let instance = M.Autocomplete.getInstance(autocomplete)\r\n            if (this.props.optionalCities) instance.updateData(this.props.optionalCities);\r\n\r\n        }\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"container filter-container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s12\">\r\n                                <i className=\"material-icons prefix\">textsms</i>\r\n                                <input type=\"text\" id=\"autocomplete-input\" onChange={this.handleChange}\r\n                                    className=\"autocomplete\" />\r\n                                <label htmlFor=\"autocomplete-input\">Search for weather location</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        optionalCities: state.location.optionalCities\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)","import React from 'react'\r\n\r\nconst SingleDaySummary = (props) => {\r\n    const { day } = props\r\n\r\n    const maxImperialVal = day.Temperature.Maximum.Value;\r\n    const maxMetricVal = Math.round(toCelsius(day.Temperature.Maximum.Value))\r\n\r\n    const minImperialVal = day.Temperature.Minimum.Value;\r\n    const minMetriclVal = Math.round(toCelsius(day.Temperature.Minimum.Value))\r\n\r\n    const ImperialUnit = day.Temperature.Maximum.Unit;\r\n    const MetricUnit = 'C';\r\n\r\n\r\n    let dayIcon = day.Day.Icon;\r\n    if (dayIcon < 10) dayIcon = `0${dayIcon}`\r\n\r\n    let nightIcon = day.Night.Icon;\r\n    if (nightIcon < 10) nightIcon = `0${nightIcon}`\r\n\r\n    const DAY_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${dayIcon}-s.png`;\r\n    const NIGHT_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${nightIcon}-s.png`;\r\n\r\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n    const isCelsius = (props.scale === 'c') ? 'hide' : '';\r\n    const isFahrenheit = (props.scale !== 'c') ? 'hide' : '';\r\n\r\n    function toCelsius(fahrenheit) {\r\n        return (fahrenheit - 32) * (5 / 9)\r\n    }\r\n    return (\r\n        <div className=\"card week-day\" >\r\n            <div className=\"card-content\">\r\n                <div className=\"card-title\">{weekdays[new Date(day.Date).getDay()]}</div>\r\n                <img src={DAY_URL} title={props.day.Day.IconPhrase} alt={props.day.Day.IconPhrase} />\r\n                <p className={isCelsius}>Max {maxImperialVal}{ImperialUnit}</p>\r\n                <p className={isFahrenheit}>Max {maxMetricVal}{MetricUnit}</p>\r\n                <hr />\r\n                <img src={NIGHT_URL} title={props.day.Night.IconPhrase} alt={props.day.Night.IconPhrase} />\r\n                <p className={isCelsius}>Min {minImperialVal}{ImperialUnit}</p>\r\n                <p className={isFahrenheit}>Min {minMetriclVal}{MetricUnit}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDaySummary","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getForcast, getWeather } from '../store/actions/weatherActions'\r\nimport { getCityInfo, toggleFavoriteStatus, loadFavoritesFromStorage } from '../store/actions/locationActions'\r\nimport { toggleScale, toggleTheme } from '../store/actions/settingActions'\r\nimport utilService from '../services/utilService'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { toast } from 'react-toastify';\r\nimport Filter from './Filter'\r\nimport SingleDaySummary from './SingleDaySummary'\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        if (!this.props.location.isFavoritesLoaded) {\r\n            this.props.loadFavoritesFromStorage()\r\n        };\r\n\r\n        //if arrived to this page from selection in favorite Page\r\n        let selectedId = this.props.match.params.cityId;\r\n        if (selectedId) {\r\n            let cityInfo = this.props.citiesInfo.find(city => city.cityId === selectedId)\r\n            if (cityInfo) this.props.getCityInfo(cityInfo.cityName, true, true);\r\n        }\r\n\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) {\r\n            let favoriteList = utilService.loadFromStorage('favorites');\r\n            if (favoriteList) {\r\n                let isFavorite = favoriteList.find(favoriteCity => favoriteCity === this.props.defaultCityName)\r\n                this.props.getCityInfo(this.props.defaultCityName, isFavorite ? true : false, true)\r\n            } else {\r\n\r\n                this.props.getCityInfo(this.props.defaultCityName, false, true)\r\n            }\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //check if the previouse cityInfo isCurrent\r\n        let cityInfoPrev = prevProps.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //check if the current cityInfo isCurrent\r\n        let cityInfoCurrent = this.props.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //if before no cityInfo and now there is: send request to weather and forcast\r\n        if (!cityInfoPrev.length && cityInfoCurrent.length) {\r\n            this.props.getForcast(cityInfoCurrent[0].cityId);\r\n            this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n\r\n            //if prev cityId not the same as current cityId: send request to weather and forcast\r\n        } else if (cityInfoPrev.length && cityInfoCurrent.length) {\r\n            if (cityInfoPrev[0].cityId !== cityInfoCurrent[0].cityId) {\r\n                this.props.getForcast(cityInfoCurrent[0].cityId);\r\n                this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n            }\r\n        }\r\n\r\n        //handle location errors\r\n        if ((prevProps.locationError !== this.props.locationError) &&\r\n            this.props.locationError !== '') {\r\n            this.notify(this.props.locationError)\r\n        }\r\n        //handle weather errors\r\n        if ((prevProps.weatherError !== this.props.weatherError) &&\r\n            this.props.weatherError !== '') {\r\n            this.notify(this.props.weatherError)\r\n        }\r\n    }\r\n    handleToggleFavorite = () => {\r\n        let city = this._getCurrentCity(this.props.citiesInfo);\r\n        this.props.toggleFavoriteStatus(city.cityId)\r\n    }\r\n    _getCurrentCity(cities) {\r\n        let currentCity = cities.filter(city => city.isCurrent)\r\n        if (currentCity.length) return currentCity[0];\r\n        else return null;\r\n    }\r\n    isCurrentFavorite() {\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) return false;\r\n        else {\r\n            if (currentCity.isFavorite) {\r\n                return true;\r\n            }\r\n            else return false;\r\n        }\r\n    }\r\n    isCurrentCelsius() {\r\n        return this.props.scale === 'c'\r\n    }\r\n    handleToggleScale = () => {\r\n        this.props.toggleScale()\r\n    }\r\n    handleToggleTheme = () => {\r\n        this.props.toggleTheme()\r\n    }\r\n    notify(msg) {\r\n        toast(msg)\r\n    }\r\n    render() {\r\n        //extracting WEATHER from props\r\n        let currentWeather = this.props.currentWeather.filter(weather => weather.isCurrent)\r\n        let weatherIcon, weatherDescription, temperatureImperialVal, temperatureImperialUnit;\r\n        let temperatureMetricUnit, temperatureMetricVal; //, isDayTime\r\n        if (currentWeather.length) {\r\n            weatherDescription = currentWeather[0].weatherDescription;\r\n\r\n            temperatureImperialVal = currentWeather[0].temperatureImperialVal;\r\n            temperatureImperialUnit = currentWeather[0].temperatureImperialUnit;\r\n\r\n            temperatureMetricVal = currentWeather[0].temperatureMetricVal;\r\n            temperatureMetricUnit = currentWeather[0].temperatureMetricUnit;\r\n\r\n            weatherIcon = currentWeather[0].weatherIcon;\r\n            if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n        }\r\n        const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n        //extracting current cityInfo from props\r\n        let cityInfo = this.props.citiesInfo.find(city => {\r\n            if (city === undefined) return false\r\n            return city.isCurrent\r\n        });\r\n\r\n        let countryName, cityName;\r\n        if (cityInfo) {\r\n            countryName = cityInfo.countryName;\r\n            cityName = cityInfo.cityName;\r\n        }\r\n\r\n        //extracting forcast from props\r\n        const { forcast } = this.props;\r\n        const { forcastDescription } = this.props;\r\n\r\n        //Creating forcast\r\n        const dayList = forcast ? (\r\n            forcast.map((day, index) => {\r\n                return (\r\n                    <SingleDaySummary scale={this.props.scale} day={day} key={index} />\r\n                )\r\n            })\r\n        ) : (<h4>There is currently no forcast show</h4>)\r\n\r\n\r\n        const isCelsius = (this.isCurrentCelsius()) ? 'hide' : '';\r\n        const isFahrenheit = (!this.isCurrentCelsius()) ? 'hide' : '';\r\n        const toggleScale = (this.isCurrentCelsius()) ? 'F' : 'C';\r\n        const toggleAddFavorite = (this.isCurrentFavorite()) ? 'Remove Favorite' : 'Add to Favorites';\r\n        const colorIsFavorite = (this.isCurrentFavorite()) ? { color: 'red' } : { color: 'grey' };\r\n        const toggleTheme = (this.props.theme==='light') ? 'D' : 'L';\r\n        const mainContainer = (this.props.theme === 'light') ? 'main-container' : 'main-container-dark';\r\n        const fontColor = (this.props.theme === 'light') ? {color:'black'} : {color:'white'};\r\n        return (\r\n            <div className={mainContainer} >\r\n                <Filter />\r\n                <div className=\"flex-space-between action-bar\">\r\n                    <div className=\"flex curr-city\">\r\n                        <img className=\"large-image\" src={CURRENT_WEATHER_URL} \r\n                            title={weatherDescription} alt={weatherDescription} />\r\n                        <div className=\"flex-col\">\r\n                            <div style={fontColor}>{cityName}, {countryName}</div>\r\n                            <div className={isCelsius} style={fontColor}>{temperatureImperialVal}{temperatureImperialUnit}</div>\r\n                            <div className={isFahrenheit} style={fontColor}>{temperatureMetricVal}{temperatureMetricUnit}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex centered add-fav\">\r\n                        <i className=\"small material-icons\" style={colorIsFavorite}>favorite</i>\r\n                        <button className=\"btn toggle-fav blue darken-2\" onClick={this.handleToggleFavorite}>{toggleAddFavorite}</button>\r\n                        <div className=\"right setting-action\">\r\n                            <button className=\"btn toggle-setting blue darken-2\" title=\"Temperature System [Fahrenheit \\ Celsius]\" onClick={this.handleToggleScale}>{toggleScale}</button>\r\n                            <button className=\"btn toggle-setting blue darken-2\" title=\"Change Theme [Dark \\ Light]\" onClick={this.handleToggleTheme}>{toggleTheme}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={fontColor} className=\"center main-description\">{weatherDescription}</div>\r\n                <ul className=\"forcast-list\">\r\n                    {dayList}\r\n                </ul>\r\n                <p className=\"center blue-text darken-2 secondary-description\">{forcastDescription}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        defaultCityName: state.location.defaultCityName,\r\n        isFavoritesLoaded: state.location.isFavoritesLoaded,\r\n        favorites: state.location.favorites,\r\n        forcast: state.weather.forcast,\r\n        forcastDescription: state.weather.forcastDescription,\r\n        currentWeather: state.weather.currentWeather,\r\n        weatherError: state.weather.error,\r\n        locationError: state.location.error,\r\n        scale: state.setting.currentScale,\r\n        theme: state.setting.currentTheme        \r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n        getForcast: (cityId) => { dispatch(getForcast(cityId)) },\r\n        getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n        toggleFavoriteStatus: (cityId) => { dispatch(toggleFavoriteStatus(cityId)) },\r\n        toggleScale: () => { dispatch(toggleScale()) },\r\n        toggleTheme: () => { dispatch(toggleTheme()) },\r\n        loadFavoritesFromStorage: () => { dispatch(loadFavoritesFromStorage()) }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","export const toggleScale = () => {\r\n    return { type: 'TOGGLE_SCALE' }\r\n}\r\n\r\nexport const toggleTheme = () => {\r\n    return { type: 'TOGGLE_THEME' }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SingleFavoriteItem = (props) => {\r\n    function toCelsius(fahrenheit) {\r\n        return (fahrenheit - 32) * (5 / 9)\r\n    }\r\n\r\n    let cityName = props.composedInfo.cityInfo.cityName;\r\n    let cityId = props.composedInfo.cityInfo.cityId;\r\n    let countryName = props.composedInfo.cityInfo.countryName;\r\n\r\n    let temperatureImperialVal = props.composedInfo.currentWeather.temperatureImperialVal;\r\n    let temperatureMetricVal = Math.round(toCelsius(temperatureImperialVal - 32 * (5 / 9)))\r\n\r\n    let temperatureImperialUnit = props.composedInfo.currentWeather.temperatureImperialUnit;\r\n    let temperatureMetricUnit = 'C';\r\n\r\n\r\n    let weatherDescription = props.composedInfo.currentWeather.weatherDescription;\r\n    let weatherIcon = props.composedInfo.currentWeather.weatherIcon;\r\n    if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n\r\n    const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n    const isCelsius = (props.scale === 'c') ? 'hide' : '';\r\n    const isFahrenheit = (props.scale !== 'c') ? 'hide' : '';\r\n\r\n    return (\r\n        <Link to={'/' + cityId}>\r\n            <div className=\"card\" >\r\n                <div className=\"card-content\">\r\n                    <div>{cityName}, {countryName}</div>\r\n                    <div className={isCelsius}>{temperatureImperialVal}{temperatureImperialUnit}</div>\r\n                    <div className={isFahrenheit}>{temperatureMetricVal}{temperatureMetricUnit}</div>\r\n                    <img src={CURRENT_WEATHER_URL} title={weatherDescription} alt={weatherDescription} />\r\n                    <div>{weatherDescription}</div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default SingleFavoriteItem","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SingleFavoriteItem from './SingleFavoriteItem'\r\n\r\nclass FavoriteList extends Component {\r\n    render() {\r\n        const favoritesInfo = [];\r\n        //composing an object that have cityInfo and weater (only if favorite)\r\n        if (this.props.citiesInfo.length) {\r\n            this.props.citiesInfo.forEach((cityInfo) => {\r\n                if (this.props.currentWeather.length) {\r\n                    this.props.currentWeather.forEach(currentWeather => {\r\n                        if (currentWeather.cityId === cityInfo.cityId && cityInfo.isFavorite) {\r\n                            favoritesInfo.push({ cityInfo, currentWeather })\r\n                        }\r\n                    })\r\n                 }\r\n            })\r\n        }\r\n\r\n        const favoritesInfoToRender = favoritesInfo.length ? (\r\n            favoritesInfo.map((composedInfo, index) => {\r\n                return (\r\n                    <SingleFavoriteItem scale={this.props.scale} composedInfo={composedInfo} key={index} />\r\n                )\r\n            })\r\n        ) : (<div className=\"\" >No Favorites Selected </div>)\r\n        \r\n        return (\r\n            <ul className=\"forcast-list center\">          \r\n                    {favoritesInfoToRender}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        currentWeather: state.weather.currentWeather,\r\n        scale:state.setting.currentScale\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FavoriteList)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport FavoriteList from './FavoriteList'\r\nimport { getCityInfo, toggleFavoriteStatus } from '../store/actions/locationActions'\r\nimport { getWeather } from '../store/actions/weatherActions'\r\n\r\n// const Favorites = (props) =>{\r\nclass Favorites extends Component {\r\n  componentDidMount() {\r\n    //sending request for cityInfo \r\n    if (this.props.favorites) this.props.favorites.forEach((favoriteCityName) => {\r\n      //check if iterated city isCurrent\r\n      let cityInfo = this.props.citiesInfo.find(cityInfo => cityInfo.cityName === favoriteCityName);\r\n      if (!cityInfo) {\r\n        this.props.getCityInfo(favoriteCityName, true, false)\r\n      }\r\n      else {//city in cityInfo Array, not marked as favorite, but is in the favorites\r\n        toggleFavoriteStatus(favoriteCityName)\r\n        this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n      }\r\n    })\r\n  }\r\n  //sending request for forcast if cityInfo is a favorite\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.props.citiesInfo.forEach((cityInfo) => {\r\n      //if cityInfo exists and it is favorite\r\n      let city = this.props.favorites.find(cityName => cityInfo.cityName === cityName)\r\n      if (city) {\r\n        //if city dont have weather, request one\r\n        if (!this.props.weather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        else {\r\n          let selectedWeather = this.props.weather.currentWeather.find(weather => weather.cityId === cityInfo.cityId)\r\n          if (!selectedWeather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    const themeColor = (this.props.theme === 'light') ? {background:'white'} : {background:'black'};\r\n\r\n    return (\r\n      <div className=\"max-container\" style={themeColor}>\r\n        <FavoriteList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    citiesInfo: state.location.citiesInfo,\r\n    favorites: state.location.favorites,\r\n    currentWeather: state.location.currentWeather,\r\n    theme:state.setting.currentTheme\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n    getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n    toggleFavoriteStatus: (cityName) => { dispatch(toggleFavoriteStatus(cityName)) },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites)","import React from 'react';\nimport Navbar from './cmps/Navbar'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './cmps/Home';\nimport Favorites from './cmps/Favorites';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css'; \nimport 'materialize-css/dist/css/materialize.min.css';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <ToastContainer />\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/favorites\" component={Favorites} />\n          <Route path=\"/:cityId\" component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { saveToStorage } from '../../services/utilService'\r\n\r\nconst initState = {\r\n    favorites: [],//City names\r\n    isFavoritesLoaded: false,\r\n    citiesInfo: [],\r\n    optionalCities:[],\r\n    defaultCityName: 'Tel Aviv',\r\n    error: ''\r\n}\r\n\r\nconst locationReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'LOAD_FAVORITES_FROM_STORAGE':\r\n            {\r\n                return {\r\n                    ...state,\r\n                    isFavoritesLoaded: true,\r\n                    favorites: action.favorites,\r\n                    error: ''\r\n                }\r\n            }\r\n        case 'SET_CITY_INFO':\r\n            {\r\n                //check if cityInfo exists\r\n                let cities = [...state.citiesInfo];\r\n\r\n                //if arrived city isCurrent, set all cities to NOT current\r\n                if (action.cityInfo.isCurrent) cities.forEach(city => city.isCurrent = false)\r\n\r\n                //check if the arrived city is in the array\r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityInfo.cityId);\r\n                if (!selectedCity) {\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities, action.cityInfo],\r\n                        error: ''\r\n                    }\r\n                } else {\r\n                    selectedCity.isCurrent = action.cityInfo.isCurrent;\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities],\r\n                        error: ''\r\n                    }\r\n                }\r\n            }\r\n        case 'TOGGLE_FAVORITE_STATUS':\r\n            {\r\n                let cities = [...state.citiesInfo];\r\n                //change the FAVORITE attribute \r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityId);\r\n                selectedCity.isFavorite = !selectedCity.isFavorite;\r\n\r\n                //check if cityName exists in the favorites\r\n                let favoriteNames = [...state.favorites];\r\n                let cityIndex = favoriteNames.indexOf(selectedCity.cityName);\r\n\r\n                //if it has been selected as favorite\r\n                if (selectedCity.isFavorite) {\r\n                    //insert to favorites if not exists\r\n                    if (cityIndex < 0) favoriteNames = [...favoriteNames, selectedCity.cityName];\r\n                } else {\r\n                    //if it has been selected as NOT favorite\r\n                    if (cityIndex >= 0) favoriteNames.splice(cityIndex, 1);\r\n                }\r\n                saveToStorage('favorites', favoriteNames)\r\n                return {\r\n                    ...state,\r\n                    favorites: favoriteNames,\r\n                    citiesInfo: [...cities],\r\n                    error: ''\r\n                }\r\n            }\r\n            case 'SET_CITIES_OPTIONS':\r\n                {\r\n                    return {\r\n                        ...state,\r\n                        optionalCities:action.optionalCities\r\n\r\n                    }\r\n                }\r\n        case 'LOCATION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: JSON.stringify(action.error)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default locationReducer","\r\nconst initState = {\r\n    forcast: [],\r\n    forcastDescription: '',\r\n    currentWeather: [],\r\n    error: '',\r\n}\r\nconst weatherReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_FORCAST':\r\n            return {\r\n                ...state,\r\n                forcast: action.forcast.DailyForecasts,\r\n                forcastDescription: action.forcast.Headline.Text,\r\n                error:''\r\n            }\r\n        case 'SET_WEATHER':\r\n            {\r\n                let weatherList = [...state.currentWeather];\r\n                let isExists = false;\r\n                let updatedWeather = weatherList.map(weather => {\r\n                    if (weather.cityId === action.weather.cityId) {\r\n                        isExists = true;\r\n                        return action.weather;\r\n                    }\r\n                    else return weather;\r\n                })\r\n                if (isExists) {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...updatedWeather],\r\n                        error:''\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...state.currentWeather, action.weather],\r\n                        error:''\r\n                    }\r\n                }\r\n            }\r\n        case 'WEATHER_ERROR':\r\n            return {\r\n                ...state,\r\n                error: JSON.stringify(action.error)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer","\r\nconst initState = {\r\n    currentScale:'c',\r\n    currentTheme: 'light',\r\n    error: ''\r\n}\r\n\r\nconst settingReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_SCALE':\r\n            {\r\n                let scale = state.currentScale === 'f' ? 'c' : 'f';\r\n                return {\r\n                    ...state,\r\n                    currentScale: scale\r\n                }\r\n            }\r\n        case 'TOGGLE_THEME':\r\n            {\r\n                let theme = state.currentTheme === 'light' ? 'dark' : 'light';\r\n                return {\r\n                    ...state,\r\n                    currentTheme: theme\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default settingReducer","import locationReducer from './locationReducer'\r\nimport weatherReducer from './weatherReducer'\r\nimport settingReducer from './settingReducer'\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weatherReducer,\r\n    location: locationReducer,\r\n    setting: settingReducer\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/libs/animate.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore,applyMiddleware } from 'redux'//compose changed for composeWithDevTools\nimport { Provider } from 'react-redux'\nimport rootReducer from  './store/reducers/rootReducer'\n//enable async operation and call external services/db from within the action creator.\n//instead of returning an action, we will return a function, thus hulting the dispach operation\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// const store = createStore(rootReducer,applyMiddleware(thunk),composeWithDevTools());\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}