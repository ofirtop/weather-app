{"version":3,"sources":["cmps/Navbar.js","services/LocationService.js","services/utilService.js","store/actions/locationActions.js","cmps/Filter.js","cmps/SingleDaySummary.js","services/WeatherService.js","store/actions/weatherActions.js","cmps/Home.js","cmps/SingleFavoriteItem.js","cmps/FavoriteList.js","cmps/Favorites.js","App.js","serviceWorker.js","store/reducers/locationReducer.js","store/reducers/weatherReducer.js","store/reducers/rootReducer.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","LocationService","cityName","query","concat","Axios","get","then","result","cityId","data","Key","LocalizedName","catch","error","console","log","utilService","saveToStorage","loadFromStorage","formatTime","time","hour","Date","getHours","minute","getMinutes","seconds","getSeconds","day","getDate","month","getMonth","year","getFullYear","_pad","key","value","str","JSON","stringify","localStorage","setItem","getItem","parse","n","getCityInfo","isFavorite","isCurrent","dispatch","getState","cityInfo","type","toggleFavoriteStatus","Filter","state","handleChange","e","_this","setState","target","handleSubmit","preventDefault","props","onSubmit","this","placeholder","onChange","Component","connect","SingleDaySummary","dayIcon","Day","Icon","nightIcon","Night","DAY_URL","NIGHT_URL","getDay","src","title","IconPhrase","alt","Temperature","Maximum","Value","Unit","Minimum","WeatherService","arguments","length","undefined","isDayTime","IsDayTime","weatherIcon","WeatherIcon","weatherDescription","WeatherText","temperatureImperialVal","Imperial","temperatureImperialUnit","temperatureMetricVal","Metric","temperatureMetricUnit","getWeather","weather","Home","handleToggleFavorite","city","_getCurrentCity","citiesInfo","_this2","location","isFavoritesLoaded","loadFavoritesFromStorage","selectedId","match","params","find","favoriteList","favoriteCity","defaultCityName","prevProps","prevState","cityInfoPrev","filter","cityInfoCurrent","getForcast","locationError","toast","weatherError","cities","currentCity","currentWeather","countryName","CURRENT_WEATHER_URL","forcast","forcastDescription","dayList","map","index","cmps_SingleDaySummary","toggleAddFavorite","isCurrentFavorite","colorIsFavorite","color","cmps_Filter","style","onClick","favorites","SingleFavoriteItem","composedInfo","FavoriteList","favoritesInfo","forEach","push","favoritesInfoToRender","cmps_SingleFavoriteItem","Favorites","favoriteCityName","cmps_FavoriteList","App","basename","process","react_toastify","cmps_Navbar","react_router","exact","path","component","Boolean","window","hostname","initState","locationReducer","action","Object","objectSpread","toConsumableArray","selectedCity","favoriteNames","cityIndex","indexOf","splice","weatherReducer","DailyForecasts","Headline","Text","weatherList","isExists","updatedWeather","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72d9364e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nconst Navbar = () =>{\r\n    return (\r\n        <nav className=\"blue darken-2\">\r\n            <div>\r\n                <Link to=\"/\" className=\"left brand\">iWeather</Link>\r\n                <ul className=\"right nav-links\">\r\n                   <li><NavLink to=\"/\">Home</NavLink></li> \r\n                   <li><NavLink to=\"/favorites\">Favorites</NavLink></li> \r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import Axios from \"axios\";\r\n\r\nconst getCityInfoByName = (cityName) => {\r\n  const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII'\r\n  const LOCATION_AUTO_COMPLETE_BASE = 'https://dataservice.accuweather.com/locations/v1/cities/autocomplete'\r\n  const query = `${LOCATION_AUTO_COMPLETE_BASE}?apikey=${WEATHER_API_KEY}&q=${cityName} `\r\n\r\n  return Axios.get(query)\r\n    .then(result => {\r\n      let cityInfo = {\r\n        cityId: result.data[0].Key,\r\n        cityName: result.data[0].LocalizedName\r\n      };\r\n\r\n      return cityInfo\r\n    })\r\n    .catch(error => console.log('RECEIVED ERROR IN LOCATION SERVICE:', error))\r\n}\r\n\r\n\r\nexport default {\r\n  getCityInfoByName\r\n}","\r\nexport default {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    formatTime\r\n}\r\n\r\nexport function saveToStorage(key, value) {\r\n    var str = JSON.stringify(value);\r\n    localStorage.setItem(key, str);\r\n}\r\n\r\nexport function loadFromStorage(key) {\r\n    var str = localStorage.getItem(key);\r\n    if (!str) return undefined;\r\n    return JSON.parse(str);\r\n}\r\n\r\nfunction formatTime(time){\r\n    var hour = new Date(time).getHours();\r\n    //hour += 2; //offset\r\n    var minute = new Date(time).getMinutes();\r\n    var seconds = new Date(time).getSeconds();\r\n    var day = new Date(time).getDate();\r\n    var month = new Date(time).getMonth() + 1;\r\n    var year = new Date(time).getFullYear();\r\n    return day + '/' + month + '/' + year + '  ' + _pad(hour) + ':' + _pad(minute) + ':' + _pad(seconds);\r\n}\r\nfunction _pad(n) {\r\n    return n < 10 ? '0' + n : n;\r\n}","import LocationService from '../../services/LocationService'\r\nimport { loadFromStorage } from '../../services/utilService'\r\n\r\nexport const getCityInfo = (cityName, isFavorite, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        LocationService.getCityInfoByName(cityName)\r\n            .then(cityInfo => {\r\n                cityInfo.isFavorite = isFavorite;\r\n                cityInfo.isCurrent = isCurrent;\r\n                dispatch({ type: 'SET_CITY_INFO', cityInfo })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'LOCATION_ERROR', error })\r\n            })\r\n    }\r\n}\r\nexport const toggleFavoriteStatus = (cityId) => {\r\n    return { type: 'TOGGLE_FAVORITE_STATUS', cityId }\r\n}\r\nexport const loadFavoritesFromStorage = () => {\r\n    return (dispatch, getState) => {\r\n        //async code - accessing location service\r\n        let favorites = loadFromStorage('favorites')\r\n        if (!favorites) favorites = [];\r\n        dispatch({ type: 'LOAD_FAVORITES_FROM_STORAGE', favorites })\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCityInfo } from '../store/actions/locationActions'\r\n\r\nclass Filter extends Component {\r\n    state = {\r\n        cityName: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            cityName:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.getCityInfo(this.state.cityName,false,true);\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"container\">\r\n                <input type=\"text\" placeholder=\"Search for weather location\" onChange={this.handleChange} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n//allow component to dispach action to set the store\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName,isFavorite,isCurrent) => dispatch(getCityInfo(cityName,isFavorite,isCurrent))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(Filter)","import React from 'react'\r\n\r\nconst SingleDaySummary = (props) => {\r\n    const { day } = props    \r\n    let dayIcon = day.Day.Icon;\r\n    if(dayIcon<10) dayIcon = `0${dayIcon}`\r\n    \r\n    let nightIcon = day.Night.Icon;\r\n    if(nightIcon<10) nightIcon = `0${nightIcon}`\r\n\r\n    const DAY_URL   = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${dayIcon}-s.png`;\r\n    const NIGHT_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${nightIcon}-s.png`;\r\n    \r\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n    return (\r\n        <div className=\"card week-day\" >\r\n            <div className=\"card-content\">\r\n                <div className=\"card-title\">{weekdays[new Date(day.Date).getDay()]}</div>  \r\n                <img src={DAY_URL} title={props.day.Day.IconPhrase} alt={props.day.Day.IconPhrase}/>                 \r\n                <p>Max {day.Temperature.Maximum.Value}{day.Temperature.Maximum.Unit}</p>\r\n                <hr/>\r\n                <img src={NIGHT_URL} title={props.day.Night.IconPhrase} alt={props.day.Night.IconPhrase}/>                 \r\n                <p>Min {day.Temperature.Minimum.Value}{day.Temperature.Minimum.Unit}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDaySummary","import Axios from \"axios\";\r\n\r\nconst getForcast = (cityId = '215854') => {\r\n    const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    const FORCAST_URL = 'https://dataservice.accuweather.com/forecasts/v1/daily/5day/';    \r\n    const query = `${FORCAST_URL}${cityId}?apikey=${WEATHER_API_KEY} `;    \r\n\r\n    let config = {\r\n        headers: {'Access-Control-Allow-Origin': '*'}\r\n    };\r\n    return Axios.get(query)\r\n        .then(result => {\r\n\r\n            return result.data\r\n        })\r\n        .catch(error =>  console.log('RECEIVED ERROR IN WEATHER SERVICE (getForcast):',error))\r\n}\r\nconst getWeather = (cityId = '215854') => {\r\n    const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    const WEATHER_URL = 'https://dataservice.accuweather.com/currentconditions/v1/';\r\n    const query = `${WEATHER_URL}${cityId}?apikey=${WEATHER_API_KEY} `;\r\n\r\n    let config = {\r\n        headers: {'Access-Control-Allow-Origin': '*'}\r\n    };\r\n\r\n    return Axios.get(query)\r\n        .then(result => {    \r\n            let weather = {\r\n                isDayTime: result.data[0].IsDayTime,\r\n                weatherIcon: result.data[0].WeatherIcon,\r\n                weatherDescription: result.data[0].WeatherText,\r\n                temperatureImperialVal: result.data[0].Temperature.Imperial.Value,\r\n                temperatureImperialUnit: result.data[0].Temperature.Imperial.Unit,\r\n                temperatureMetricVal: result.data[0].Temperature.Metric.Value,\r\n                temperatureMetricUnit: result.data[0].Temperature.Metric.Unit,\r\n            }\r\n            return weather\r\n        })\r\n        .catch(error => console.log('RECEIVED ERROR IN WEATHER SERVICE (getWeather):',error))\r\n}\r\n\r\n\r\nexport default {\r\n    getForcast,\r\n    getWeather\r\n}","import WeatherService from '../../services/WeatherService'\r\n\r\nexport const getForcast = (cityId) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getForcast(cityId)\r\n            .then(forcast => {\r\n                dispatch({ type: 'SET_FORCAST', forcast })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getWeather = (cityId, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getWeather(cityId)\r\n            .then(weather => {\r\n                weather.cityId = cityId;\r\n                weather.isCurrent = isCurrent;\r\n                dispatch({ type: 'SET_WEATHER', weather })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Filter from './Filter'\r\nimport { connect } from 'react-redux'\r\nimport SingleDaySummary from './SingleDaySummary'\r\nimport { getForcast, getWeather } from '../store/actions/weatherActions'\r\nimport { getCityInfo, toggleFavoriteStatus, loadFavoritesFromStorage } from '../store/actions/locationActions'\r\nimport utilService from '../services/utilService'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        if (!this.props.location.isFavoritesLoaded) {\r\n            this.props.loadFavoritesFromStorage()\r\n        };\r\n\r\n        //if arrived to this page from selection in favorite Page\r\n        let selectedId = this.props.match.params.cityId;\r\n        if (selectedId) {\r\n            let cityInfo = this.props.citiesInfo.find(city => city.cityId === selectedId)\r\n            if (cityInfo) this.props.getCityInfo(cityInfo.cityName, true, true);\r\n        }\r\n\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) {\r\n            let favoriteList = utilService.loadFromStorage('favorites');\r\n            if (favoriteList) {\r\n                let isFavorite = favoriteList.find(favoriteCity => favoriteCity === this.props.defaultCityName)\r\n                this.props.getCityInfo(this.props.defaultCityName, isFavorite ? true : false, true)\r\n            } else {\r\n\r\n                this.props.getCityInfo(this.props.defaultCityName, false, true)\r\n            }\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //check if the previouse cityInfo isCurrent\r\n        let cityInfoPrev = prevProps.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //check if the current cityInfo isCurrent\r\n        let cityInfoCurrent = this.props.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //if before no cityInfo and now there is: send request to weather and forcast\r\n        if (!cityInfoPrev.length && cityInfoCurrent.length) {\r\n            this.props.getForcast(cityInfoCurrent[0].cityId);\r\n            this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n\r\n            //if prev cityId not the same as current cityId: send request to weather and forcast\r\n        } else if (cityInfoPrev.length && cityInfoCurrent.length) {\r\n            if (cityInfoPrev[0].cityId !== cityInfoCurrent[0].cityId) {\r\n                this.props.getForcast(cityInfoCurrent[0].cityId);\r\n                this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n            }\r\n        }\r\n\r\n        //handle location errors\r\n        if ((prevProps.locationError !== this.props.locationError) &&\r\n        this.props.locationError !== '') {\r\n            toast(this.props.locationError)\r\n        }\r\n        //handle weather errors\r\n        if ((prevProps.weatherError !== this.props.weatherError) &&\r\n            this.props.weatherError !== '') {\r\n                toast(this.props.weatherError)\r\n        }\r\n    }\r\n    handleToggleFavorite = () => {\r\n        let city = this._getCurrentCity(this.props.citiesInfo);\r\n        this.props.toggleFavoriteStatus(city.cityId)\r\n    }\r\n    _getCurrentCity(cities) {\r\n        let currentCity = cities.filter(city => city.isCurrent)\r\n        if (currentCity.length) return currentCity[0];\r\n        else return null;\r\n    }\r\n    isCurrentFavorite() {\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) return false;\r\n        else {\r\n            if (currentCity.isFavorite) {\r\n                return true;\r\n            }\r\n            else return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //call notify\r\n\r\n        // console.log('render error: ',this.props.locationError)\r\n        // if(this.props.locationError) this.notify(this.props.locationError)\r\n\r\n        //extracting WEATHER from props\r\n        let currentWeather = this.props.currentWeather.filter(weather => weather.isCurrent)\r\n        let weatherIcon, weatherDescription, temperatureImperialVal, temperatureImperialUnit;\r\n        //let temperatureMetricUnit, temperatureMetricVal, isDayTime\r\n        if (currentWeather.length) {\r\n            weatherDescription = currentWeather[0].weatherDescription;\r\n            temperatureImperialVal = currentWeather[0].temperatureImperialVal;\r\n            temperatureImperialUnit = currentWeather[0].temperatureImperialUnit;\r\n\r\n            weatherIcon = currentWeather[0].weatherIcon;\r\n            if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n        }\r\n        const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n        //extracting current cityInfo from props\r\n        let cityInfo = this.props.citiesInfo.find(city => {\r\n            if (city === undefined) return false\r\n            return city.isCurrent\r\n        });\r\n\r\n        let countryName, cityName;\r\n        if (cityInfo) {\r\n            countryName = cityInfo.countryName;\r\n            cityName = cityInfo.cityName;\r\n        }\r\n\r\n        //extracting forcast from props\r\n        const { forcast } = this.props;\r\n        const { forcastDescription } = this.props;\r\n\r\n        //Creating forcast\r\n        const dayList = forcast ? (\r\n            forcast.map((day, index) => {\r\n                return (\r\n                    <SingleDaySummary day={day} key={index} />\r\n                )\r\n            })\r\n        ) : (<h4>There is currently no forcast show</h4>)\r\n\r\n\r\n        const toggleAddFavorite = (this.isCurrentFavorite()) ? 'Remove Favorite' : \"Add to Favorites\";\r\n        const colorIsFavorite = (this.isCurrentFavorite()) ? { color: 'red' } : { color: 'grey' };\r\n\r\n        return (\r\n            <div className=\"container\" >\r\n                <Filter />\r\n                <div className=\"flex-space-between\">\r\n                    <div className=\"flex  \">\r\n                        <img className=\"large-image\" src={CURRENT_WEATHER_URL}\r\n                            title={weatherDescription} alt={weatherDescription} />\r\n                        <div className=\"flex-col\">\r\n                            <div>{cityName}, {countryName}</div>\r\n                            <div>{temperatureImperialVal}{temperatureImperialUnit}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex centered\">\r\n                        <i className=\"small material-icons\" style={colorIsFavorite}>favorite</i>\r\n                        <button className=\"btn toggle-fav blue darken-2\" onClick={this.handleToggleFavorite}>{toggleAddFavorite}</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"center main-description\">{weatherDescription}</div>\r\n                <ul className=\"forcast-list\">\r\n                    {dayList}\r\n                </ul>\r\n                <p className=\"center blue-text darken-2 secondary-description\">{forcastDescription}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        defaultCityName: state.location.defaultCityName,\r\n        isFavoritesLoaded: state.location.isFavoritesLoaded,\r\n        favorites: state.location.favorites,\r\n        forcast: state.weather.forcast,\r\n        forcastDescription: state.weather.forcastDescription,\r\n        currentWeather: state.weather.currentWeather,\r\n        weatherError: state.weather.error,\r\n        locationError: state.location.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n        getForcast: (cityId) => { dispatch(getForcast(cityId)) },\r\n        getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n        toggleFavoriteStatus: (cityId) => { dispatch(toggleFavoriteStatus(cityId)) },\r\n        loadFavoritesFromStorage: () => { dispatch(loadFavoritesFromStorage()) }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SingleFavoriteItem = (props) => {\r\n    let cityName = props.composedInfo.cityInfo.cityName;\r\n    let cityId = props.composedInfo.cityInfo.cityId;\r\n    let countryName = props.composedInfo.cityInfo.countryName;\r\n\r\n    let temperatureImperialUnit = props.composedInfo.currentWeather.temperatureImperialUnit;\r\n    let temperatureImperialVal = props.composedInfo.currentWeather.temperatureImperialVal;\r\n    let weatherDescription = props.composedInfo.currentWeather.weatherDescription;\r\n    let weatherIcon = props.composedInfo.currentWeather.weatherIcon;\r\n    if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n\r\n    const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n    return (\r\n        <Link to={'/' + cityId}>\r\n            <div className=\"card\" >\r\n                <div className=\"card-content\">\r\n                    <div>{cityName}, {countryName}</div>\r\n                    <div>{temperatureImperialVal}, {temperatureImperialUnit}</div>\r\n                    <img src={CURRENT_WEATHER_URL} title={weatherDescription} alt={weatherDescription} />\r\n                    <div>{weatherDescription}</div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default SingleFavoriteItem","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SingleFavoriteItem from './SingleFavoriteItem'\r\n\r\nclass FavoriteList extends Component {\r\n    render() {\r\n        const favoritesInfo = [];\r\n\r\n        //composing an object that have cityInfo and weater (only if favorite)\r\n        if (this.props.citiesInfo.length) {\r\n            this.props.citiesInfo.forEach((cityInfo) => {\r\n                if (this.props.currentWeather.length) {\r\n                    this.props.currentWeather.forEach(currentWeather => {\r\n                        if (currentWeather.cityId === cityInfo.cityId && cityInfo.isFavorite) {\r\n                            favoritesInfo.push({ cityInfo, currentWeather })\r\n                        }\r\n                    })\r\n                 }\r\n            })\r\n        }\r\n\r\n        const favoritesInfoToRender = favoritesInfo.length ? (\r\n            favoritesInfo.map((composedInfo, index) => {\r\n                return (\r\n                    <SingleFavoriteItem composedInfo={composedInfo} key={index} />\r\n                )\r\n            })\r\n        ) : (<div className=\"\" >No Favorites Selected </div>)\r\n       \r\n        return (\r\n            <ul className=\"forcast-list center\">          \r\n                    {favoritesInfoToRender}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        currentWeather: state.weather.currentWeather\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FavoriteList)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport FavoriteList from './FavoriteList'\r\nimport { getCityInfo, toggleFavoriteStatus } from '../store/actions/locationActions'\r\nimport { getWeather } from '../store/actions/weatherActions'\r\n\r\n// const Favorites = (props) =>{\r\nclass Favorites extends Component {\r\n  componentDidMount() {\r\n    //sending request for cityInfo \r\n    if (this.props.favorites) this.props.favorites.forEach((favoriteCityName) => {\r\n      //check if iterated city isCurrent\r\n      let cityInfo = this.props.citiesInfo.find(cityInfo => cityInfo.cityName === favoriteCityName);\r\n      if (!cityInfo) {\r\n        this.props.getCityInfo(favoriteCityName, true, false)\r\n      }\r\n      else {//city in cityInfo Array, not marked as favorite, but is in the favorites\r\n        toggleFavoriteStatus(favoriteCityName)\r\n        this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n      }\r\n    })\r\n  }\r\n  //sending request for forcast if cityInfo is a favorite\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.props.citiesInfo.forEach((cityInfo) => {\r\n      //if cityInfo exists and it is favorite\r\n      let city = this.props.favorites.find(cityName => cityInfo.cityName === cityName)\r\n      if (city) {\r\n        //if city dont have weather, request one\r\n        if (!this.props.weather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        else {\r\n          let selectedWeather = this.props.weather.currentWeather.find(weather => weather.cityId === cityInfo.cityId)\r\n          if (!selectedWeather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <FavoriteList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    citiesInfo: state.location.citiesInfo,\r\n    favorites: state.location.favorites,\r\n    currentWeather: state.location.currentWeather\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n    getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n    toggleFavoriteStatus: (cityName) => { dispatch(toggleFavoriteStatus(cityName)) },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites)","import React from 'react';\nimport Navbar from './cmps/Navbar'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './cmps/Home';\nimport Favorites from './cmps/Favorites';\nimport { ToastContainer } from 'react-toastify';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <ToastContainer />\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/favorites\" component={Favorites} />\n          <Route path=\"/:cityId\" component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { saveToStorage } from '../../services/utilService'\r\n\r\nconst initState = {\r\n    favorites: [],//City names\r\n    isFavoritesLoaded: false,\r\n    citiesInfo: [],\r\n    defaultCityName: 'Tel Aviv',\r\n    error: ''\r\n}\r\n\r\nconst locationReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'LOAD_FAVORITES_FROM_STORAGE':\r\n            {\r\n                return {\r\n                    ...state,\r\n                    isFavoritesLoaded: true,\r\n                    favorites: action.favorites,\r\n                    error: ''\r\n                }\r\n            }\r\n        case 'SET_CITY_INFO':\r\n            {\r\n                //check if cityInfo exists\r\n                let cities = [...state.citiesInfo];\r\n\r\n                //if arrived city isCurrent, set all cities to NOT current\r\n                if (action.cityInfo.isCurrent) cities.forEach(city => city.isCurrent = false)\r\n\r\n                //check if the arrived city is in the array\r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityInfo.cityId);\r\n                if (!selectedCity) {\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities, action.cityInfo],\r\n                        error: ''\r\n                    }\r\n                } else {\r\n                    selectedCity.isCurrent = action.cityInfo.isCurrent;\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities],\r\n                        error: ''\r\n                    }\r\n                }\r\n            }\r\n        case 'TOGGLE_FAVORITE_STATUS':\r\n            {\r\n                let cities = [...state.citiesInfo];\r\n                //change the FAVORITE attribute \r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityId);\r\n                selectedCity.isFavorite = !selectedCity.isFavorite;\r\n\r\n                //check if cityName exists in the favorites\r\n                let favoriteNames = [...state.favorites];\r\n                let cityIndex = favoriteNames.indexOf(selectedCity.cityName);\r\n\r\n                //if it has been selected as favorite\r\n                if (selectedCity.isFavorite) {\r\n                    //insert to favorites if not exists\r\n                    if (cityIndex < 0) favoriteNames = [...favoriteNames, selectedCity.cityName];\r\n                } else {\r\n                    //if it has been selected as NOT favorite\r\n                    if (cityIndex >= 0) favoriteNames.splice(cityIndex, 1);\r\n                }\r\n                saveToStorage('favorites', favoriteNames)\r\n                return {\r\n                    ...state,\r\n                    favorites: favoriteNames,\r\n                    citiesInfo: [...cities],\r\n                    error: ''\r\n                }\r\n            }\r\n        case 'LOCATION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default locationReducer","\r\nconst initState = {\r\n    forcast: [],\r\n    forcastDescription: '',\r\n    currentWeather: [],\r\n    error: '',\r\n}\r\nconst weatherReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_FORCAST':\r\n            return {\r\n                ...state,\r\n                forcast: action.forcast.DailyForecasts,\r\n                forcastDescription: action.forcast.Headline.Text,\r\n                error:''\r\n            }\r\n        case 'SET_WEATHER':\r\n            {\r\n                let weatherList = [...state.currentWeather];\r\n                let isExists = false;\r\n                let updatedWeather = weatherList.map(weather => {\r\n                    if (weather.cityId === action.weather.cityId) {\r\n                        isExists = true;\r\n                        return action.weather;\r\n                    }\r\n                    else return weather;\r\n                })\r\n                if (isExists) {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...updatedWeather],\r\n                        error:''\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...state.currentWeather, action.weather],\r\n                        error:''\r\n                    }\r\n                }\r\n            }\r\n        case 'WEATHER_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer","import locationReducer from './locationReducer'\r\nimport weatherReducer from './weatherReducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weatherReducer,\r\n    location: locationReducer\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/libs/animate.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore,applyMiddleware,compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from  './store/reducers/rootReducer'\n//enable async operation and call external services/db from within the action creator.\n//instead of returning an action, we will return a function, thus hulting the dispach operation\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// const store = createStore(rootReducer,applyMiddleware(thunk),composeWithDevTools());\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}