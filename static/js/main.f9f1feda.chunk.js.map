{"version":3,"sources":["cmps/Navbar.js","services/WeatherService.js","store/actions/weatherActions.js","services/LocationService.js","services/utilService.js","store/actions/locationActions.js","cmps/Filter.js","cmps/SingleDaySummary.js","cmps/Home.js","store/actions/settingActions.js","cmps/SingleFavoriteItem.js","cmps/FavoriteList.js","cmps/Favorites.js","App.js","serviceWorker.js","store/reducers/locationReducer.js","store/reducers/weatherReducer.js","store/reducers/settingReducer.js","store/reducers/rootReducer.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","react_router_dom","to","WeatherService","cityId","arguments","length","undefined","query","concat","Axios","get","then","result","data","catch","error","console","log","isDayTime","IsDayTime","weatherIcon","WeatherIcon","weatherDescription","WeatherText","temperatureImperialVal","Temperature","Imperial","Value","temperatureImperialUnit","Unit","temperatureMetricVal","Metric","temperatureMetricUnit","getWeather","isCurrent","dispatch","getState","weather","type","LocationService","cityName","Key","LocalizedName","utilService","saveToStorage","loadFromStorage","formatTime","time","hour","Date","getHours","minute","getMinutes","seconds","getSeconds","day","getDate","month","getMonth","year","getFullYear","_pad","key","value","str","JSON","stringify","localStorage","setItem","getItem","parse","n","getCityInfo","isFavorite","cityInfo","toggleFavoriteStatus","Filter","state","handleChange","e","_this","setState","target","handleSubmit","preventDefault","onSubmit","this","placeholder","onChange","Component","connect","SingleDaySummary","maxImperialVal","Maximum","maxMetricVal","Math","round","toCelsius","minImperialVal","Minimum","minMetriclVal","ImperialUnit","dayIcon","Day","Icon","nightIcon","Night","DAY_URL","NIGHT_URL","isCelsius","scale","isFahrenheit","fahrenheit","getDay","src","title","IconPhrase","alt","Home","handleToggleFavorite","city","_getCurrentCity","citiesInfo","handleToggleScale","toggleScale","handleToggleTheme","toggleTheme","_this2","location","isFavoritesLoaded","loadFavoritesFromStorage","selectedId","match","params","find","favoriteList","favoriteCity","defaultCityName","prevProps","prevState","cityInfoPrev","filter","cityInfoCurrent","getForcast","locationError","notify","weatherError","cities","currentCity","msg","toast","_this3","currentWeather","countryName","CURRENT_WEATHER_URL","forcast","forcastDescription","dayList","map","index","cmps_SingleDaySummary","isCurrentCelsius","toggleAddFavorite","isCurrentFavorite","colorIsFavorite","color","theme","cmps_Filter","style","onClick","favorites","setting","currentScale","currentTheme","SingleFavoriteItem","composedInfo","FavoriteList","favoritesInfo","forEach","push","favoritesInfoToRender","cmps_SingleFavoriteItem","Favorites","favoriteCityName","cmps_FavoriteList","App","basename","process","react_toastify","cmps_Navbar","react_router","exact","path","component","Boolean","window","hostname","initState","locationReducer","action","Object","objectSpread","toConsumableArray","selectedCity","favoriteNames","cityIndex","indexOf","splice","weatherReducer","DailyForecasts","Headline","Text","weatherList","isExists","updatedWeather","settingReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAgBeA,EAdA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,cAAvB,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACVH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,KAAZ,SACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,cAAZ,0FCyBTC,EAhCI,WAAgC,IAA/BC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB,SAGnBG,GAHyCH,UAAAC,OAAA,GAAAD,UAAA,GAGpC,GAAAI,OADS,gEACTA,OAAoBL,EAApB,YAAAK,OAFa,mCAEb,MAEX,OAAOC,IAAMC,IAAIH,GACZI,KAAK,SAAAC,GACF,OAAOA,EAAOC,OAEjBC,MAAM,SAAAC,GAAK,OAAKC,QAAQC,IAAIF,MAuBtBb,EArBI,WAAuB,IAAtBC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAb,SAGnBG,EAAK,GAAAC,OADS,6DACTA,OAAoBL,EAApB,YAAAK,OAFa,mCAEb,KAEX,OAAOC,IAAMC,IAAIH,GACZI,KAAK,SAAAC,GAUF,MATc,CACVM,UAAWN,EAAOC,KAAK,GAAGM,UAC1BC,YAAaR,EAAOC,KAAK,GAAGQ,YAC5BC,mBAAoBV,EAAOC,KAAK,GAAGU,YACnCC,uBAAwBZ,EAAOC,KAAK,GAAGY,YAAYC,SAASC,MAC5DC,wBAAyBhB,EAAOC,KAAK,GAAGY,YAAYC,SAASG,KAC7DC,qBAAsBlB,EAAOC,KAAK,GAAGY,YAAYM,OAAOJ,MACxDK,sBAAuBpB,EAAOC,KAAK,GAAGY,YAAYM,OAAOF,QAIhEf,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MCjBvBkB,EAAa,SAAC9B,EAAQ+B,GAC/B,OAAO,SAACC,EAAUC,GACdlC,EAA0BC,GACrBQ,KAAK,SAAA0B,GACFA,EAAQlC,OAASA,EACjBkC,EAAQH,UAAYA,EACpBC,EAAS,CAAEG,KAAM,cAAeD,cAEnCvB,MAAM,SAAAC,GACHoB,EAAS,CAAEG,KAAM,gBAAiBvB,cCHnCwB,EAlBW,SAACC,GACzB,IAEMjC,EAAK,GAAAC,OADyB,uEACzB,YAAAA,OAFa,mCAEb,OAAAA,OAAiEgC,EAAjE,KAEX,OAAO/B,IAAMC,IAAIH,GACdI,KAAK,SAAAC,GAMJ,MALe,CACbT,OAAQS,EAAOC,KAAK,GAAG4B,IACvBD,SAAU5B,EAAOC,KAAK,GAAG6B,iBAK5B5B,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MCfjB4B,EAAA,CACXC,gBACAC,kBACAC,WAcJ,SAAoBC,GAChB,IAAIC,EAAO,IAAIC,KAAKF,GAAMG,WAEtBC,EAAS,IAAIF,KAAKF,GAAMK,aACxBC,EAAU,IAAIJ,KAAKF,GAAMO,aACzBC,EAAM,IAAIN,KAAKF,GAAMS,UACrBC,EAAQ,IAAIR,KAAKF,GAAMW,WAAa,EACpCC,EAAO,IAAIV,KAAKF,GAAMa,cAC1B,OAAOL,EAAM,IAAME,EAAQ,IAAME,EAAO,KAAOE,EAAKb,GAAQ,IAAMa,EAAKV,GAAU,IAAMU,EAAKR,KAnBzF,SAAST,EAAckB,EAAKC,GAC/B,IAAIC,EAAMC,KAAKC,UAAUH,GACzBI,aAAaC,QAAQN,EAAKE,GAGvB,SAASnB,EAAgBiB,GAC5B,IAAIE,EAAMG,aAAaE,QAAQP,GAC/B,GAAKE,EACL,OAAOC,KAAKK,MAAMN,GAatB,SAASH,EAAKU,GACV,OAAOA,EAAI,GAAK,IAAMA,EAAIA,EC1BvB,IAAMC,EAAc,SAAChC,EAAUiC,EAAYvC,GAC9C,OAAO,SAACC,EAAUC,GACdG,EAAkCC,GAC7B7B,KAAK,SAAA+D,GACFA,EAASD,WAAaA,EACtBC,EAASxC,UAAYA,EACMC,EAAV,WAAbK,EAAgC,CAAEF,KAAM,iBAAkBvB,MAAOyB,GACvD,CAAEF,KAAM,gBAAiBoC,eAE1C5D,MAAM,SAAAC,GACHoB,EAAS,CAAEG,KAAM,iBAAkBvB,cAKtC4D,EAAuB,SAACxE,GACjC,MAAO,CAAEmC,KAAM,yBAA0BnC,2BCfvCyE,6MACFC,MAAQ,CACJrC,SAAU,MAEdsC,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVzC,SAASuC,EAAEG,OAAOnB,WAG1BoB,aAAe,SAACJ,GACZA,EAAEK,iBACFJ,EAAKrF,MAAM6E,YAAYQ,EAAKH,MAAMrC,UAAS,GAAM,4EAGjD,OACI5C,EAAAC,EAAAC,cAAA,QAAMuF,SAAUC,KAAKH,aAAcpF,UAAU,8BACzCH,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,OAAOiD,YAAY,8BAA8BC,SAAUF,KAAKR,uBAhBvEW,aA4BNC,cAAQ,KALI,SAACvD,GACxB,MAAO,CACHqC,YAAa,SAAChC,EAASiC,EAAWvC,GAArB,OAAmCC,EAASqC,EAAYhC,EAASiC,EAAWvC,OAGlFwD,CAAkCd,GCgBlCe,EA9CU,SAAChG,GAAU,IACxB4D,EAAQ5D,EAAR4D,IAEFqC,EAAiBrC,EAAI9B,YAAYoE,QAAQlE,MACzCmE,EAAeC,KAAKC,MAAMC,EAAU1C,EAAI9B,YAAYoE,QAAQlE,QAE5DuE,EAAiB3C,EAAI9B,YAAY0E,QAAQxE,MACzCyE,EAAgBL,KAAKC,MAAMC,EAAU1C,EAAI9B,YAAY0E,QAAQxE,QAE7D0E,EAAe9C,EAAI9B,YAAYoE,QAAQhE,KAIzCyE,EAAU/C,EAAIgD,IAAIC,KAClBF,EAAU,KAAIA,EAAO,IAAA9F,OAAO8F,IAEhC,IAAIG,EAAYlD,EAAImD,MAAMF,KACtBC,EAAY,KAAIA,EAAS,IAAAjG,OAAOiG,IAEpC,IAAME,EAAO,wEAAAnG,OAA2E8F,EAA3E,UACPM,EAAS,wEAAApG,OAA2EiG,EAA3E,UAITI,EAA6B,MAAhBlH,EAAMmH,MAAiB,OAAS,GAC7CC,EAAgC,MAAhBpH,EAAMmH,MAAiB,OAAS,GAEtD,SAASb,EAAUe,GACf,OAA4B,EAAI,GAAxBA,EAAa,IAEzB,OACIpH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAXV,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAWV,IAAIkD,KAAKM,EAAIN,MAAMgE,WACzDrH,EAAAC,EAAAC,cAAA,OAAKoH,IAAKP,EAASQ,MAAOxH,EAAM4D,IAAIgD,IAAIa,WAAYC,IAAK1H,EAAM4D,IAAIgD,IAAIa,aACvExH,EAAAC,EAAAC,cAAA,KAAGC,UAAW8G,GAAd,OAA8BjB,EAAgBS,GAC9CzG,EAAAC,EAAAC,cAAA,KAAGC,UAAWgH,GAAd,OAAiCjB,EA1B1B,KA2BPlG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKoH,IAAKN,EAAWO,MAAOxH,EAAM4D,IAAImD,MAAMU,WAAYC,IAAK1H,EAAM4D,IAAImD,MAAMU,aAC7ExH,EAAAC,EAAAC,cAAA,KAAGC,UAAW8G,GAAd,OAA8BX,EAAgBG,GAC9CzG,EAAAC,EAAAC,cAAA,KAAGC,UAAWgH,GAAd,OAAiCX,EA9B1B,QCDjBkB,6MA8DFC,qBAAuB,WACnB,IAAIC,EAAOxC,EAAKyC,gBAAgBzC,EAAKrF,MAAM+H,YAC3C1C,EAAKrF,MAAMgF,qBAAqB6C,EAAKrH,WAoBzCwH,kBAAoB,WAChB3C,EAAKrF,MAAMiI,iBAEfC,kBAAoB,WAChB7C,EAAKrF,MAAMmI,kGAvFK,IAAAC,EAAAzC,KACXA,KAAK3F,MAAMqI,SAASC,mBACrB3C,KAAK3F,MAAMuI,2BAIf,IAAIC,EAAa7C,KAAK3F,MAAMyI,MAAMC,OAAOlI,OACzC,GAAIgI,EAAY,CACZ,IAAIzD,EAAWY,KAAK3F,MAAM+H,WAAWY,KAAK,SAAAd,GAAI,OAAIA,EAAKrH,SAAWgI,IAC9DzD,GAAUY,KAAK3F,MAAM6E,YAAYE,EAASlC,UAAU,GAAM,GAIlE,IADkB8C,KAAK3F,MAAM+H,WAAWY,KAAK,SAAAd,GAAI,OAAIA,EAAKtF,YACxC,CACd,IAAIqG,EAAe5F,EAAYE,gBAAgB,aAC/C,GAAI0F,EAAc,CACd,IAAI9D,EAAa8D,EAAaD,KAAK,SAAAE,GAAY,OAAIA,IAAiBT,EAAKpI,MAAM8I,kBAC/EnD,KAAK3F,MAAM6E,YAAYc,KAAK3F,MAAM8I,kBAAiBhE,GAA2B,QAG9Ea,KAAK3F,MAAM6E,YAAYc,KAAK3F,MAAM8I,iBAAiB,GAAO,+CAInDC,EAAWC,GAE1B,IAAIC,EAAeF,EAAUhB,WAAWmB,OAAO,SAAAnE,GAC3C,YAAiBpE,IAAboE,IAC0B,IAAvBA,EAASxC,YAIhB4G,EAAkBxD,KAAK3F,MAAM+H,WAAWmB,OAAO,SAAAnE,GAC/C,YAAiBpE,IAAboE,IAC0B,IAAvBA,EAASxC,aAIf0G,EAAavI,QAAUyI,EAAgBzI,QACxCiF,KAAK3F,MAAMoJ,WAAWD,EAAgB,GAAG3I,QACzCmF,KAAK3F,MAAMsC,WAAW6G,EAAgB,GAAG3I,QAAQ,IAG1CyI,EAAavI,QAAUyI,EAAgBzI,QAC1CuI,EAAa,GAAGzI,SAAW2I,EAAgB,GAAG3I,SAC9CmF,KAAK3F,MAAMoJ,WAAWD,EAAgB,GAAG3I,QACzCmF,KAAK3F,MAAMsC,WAAW6G,EAAgB,GAAG3I,QAAQ,IAKpDuI,EAAUM,gBAAkB1D,KAAK3F,MAAMqJ,eACX,KAA7B1D,KAAK3F,MAAMqJ,eACX1D,KAAK2D,OAAO3D,KAAK3F,MAAMqJ,eAGtBN,EAAUQ,eAAiB5D,KAAK3F,MAAMuJ,cACX,KAA5B5D,KAAK3F,MAAMuJ,cACX5D,KAAK2D,OAAO3D,KAAK3F,MAAMuJ,sDAOfC,GACZ,IAAIC,EAAcD,EAAON,OAAO,SAAArB,GAAI,OAAIA,EAAKtF,YAC7C,OAAIkH,EAAY/I,OAAe+I,EAAY,GAC/B,iDAGZ,IAAIA,EAAc9D,KAAK3F,MAAM+H,WAAWY,KAAK,SAAAd,GAAI,OAAIA,EAAKtF,YAC1D,QAAKkH,KAEGA,EAAY3E,sDAOpB,MAA4B,MAArBa,KAAK3F,MAAMmH,qCAQfuC,GACHC,YAAMD,oCAED,IAGDjI,EAAaE,EAAoBE,EAAwBI,EACzDI,EAAuBF,EAJtByH,EAAAjE,KAEDkE,EAAiBlE,KAAK3F,MAAM6J,eAAeX,OAAO,SAAAxG,GAAO,OAAIA,EAAQH,YAGrEsH,EAAenJ,SACfiB,EAAqBkI,EAAe,GAAGlI,mBAEvCE,EAAyBgI,EAAe,GAAGhI,uBAC3CI,EAA0B4H,EAAe,GAAG5H,wBAE5CE,EAAuB0H,EAAe,GAAG1H,qBACzCE,EAAwBwH,EAAe,GAAGxH,uBAE1CZ,EAAcoI,EAAe,GAAGpI,aACd,KAAIA,EAAW,IAAAZ,OAAOY,KAE5C,IAQIqI,EAAajH,EARXkH,EAAmB,wEAAAlJ,OAA2EY,EAA3E,UAGrBsD,EAAWY,KAAK3F,MAAM+H,WAAWY,KAAK,SAAAd,GACtC,YAAalH,IAATkH,GACGA,EAAKtF,YAIZwC,IACA+E,EAAc/E,EAAS+E,YACvBjH,EAAWkC,EAASlC,UA5BnB,IAgCGmH,EAAYrE,KAAK3F,MAAjBgK,QACAC,EAAuBtE,KAAK3F,MAA5BiK,mBAGFC,EAAUF,EACZA,EAAQG,IAAI,SAACvG,EAAKwG,GACd,OACInK,EAAAC,EAAAC,cAACkK,EAAD,CAAkBlD,MAAOyC,EAAK5J,MAAMmH,MAAOvD,IAAKA,EAAKO,IAAKiG,MAGjEnK,EAAAC,EAAAC,cAAA,gDAGC+G,EAAavB,KAAK2E,mBAAsB,OAAS,GACjDlD,EAAiBzB,KAAK2E,mBAA+B,GAAT,OAC5CrC,EAAetC,KAAK2E,mBAAsB,IAAM,IAChDC,EAAqB5E,KAAK6E,oBAAuB,kBAAoB,mBACrEC,EAAmB9E,KAAK6E,oBAAuB,CAAEE,MAAO,OAAU,CAAEA,MAAO,QAC3EvC,EAAkC,UAAnBxC,KAAK3F,MAAM2K,MAAmB,IAAM,IAEzD,OACI1K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACyK,EAAD,MACA3K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcmH,IAAKwC,EAC9BvC,MAAO7F,EAAoB+F,IAAK/F,IACpC1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WAAM0C,EAAN,KAAkBiH,GAClB7J,EAAAC,EAAAC,cAAA,OAAKC,UAAW8G,GAAYrF,EAAwBI,GACpDhC,EAAAC,EAAAC,cAAA,OAAKC,UAAWgH,GAAejF,EAAsBE,KAG7DpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuByK,MAAOJ,GAA3C,YACAxK,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAA+B0K,QAASnF,KAAKiC,sBAAuB2C,GACtFtK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mCAAmCoH,MAAM,6CAA4CsD,QAASnF,KAAKqC,mBAAoBC,GACzIhI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mCAAmCoH,MAAM,+BAA8BsD,QAASnF,KAAKuC,mBAAoBC,MAIvIlI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BuB,GAC1C1B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACT8J,GAELjK,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mDAAmD6J,WA3K7DnE,aA2MJC,cA1BS,SAACb,GACrB,MAAO,CACH6C,WAAY7C,EAAMmD,SAASN,WAC3Be,gBAAiB5D,EAAMmD,SAASS,gBAChCR,kBAAmBpD,EAAMmD,SAASC,kBAClCyC,UAAW7F,EAAMmD,SAAS0C,UAC1Bf,QAAS9E,EAAMxC,QAAQsH,QACvBC,mBAAoB/E,EAAMxC,QAAQuH,mBAClCJ,eAAgB3E,EAAMxC,QAAQmH,eAC9BN,aAAcrE,EAAMxC,QAAQtB,MAC5BiI,cAAenE,EAAMmD,SAASjH,MAC9B+F,MAAOjC,EAAM8F,QAAQC,aACrBN,MAAOzF,EAAM8F,QAAQE,eAGF,SAAC1I,GACxB,MAAO,CACHqC,YAAa,SAAChC,EAAUiC,EAAYvC,GAAvB,OAAqCC,EAASqC,EAAYhC,EAAUiC,EAAYvC,KAC7F6G,WAAY,SAAC5I,GAAagC,EN5MR,SAAChC,GACvB,OAAO,SAACgC,EAAUC,GACdlC,EAA0BC,EAAOgC,GAC5BxB,KAAK,SAAAgJ,GACFxH,EAAS,CAAEG,KAAM,cAAeqH,cAEnC7I,MAAM,SAAAC,GACHoB,EAAS,CAAEG,KAAM,gBAAiBvB,aMqMPgI,CAAW5I,KAC9C8B,WAAY,SAAC9B,EAAQ+B,GAAgBC,EAASF,EAAW9B,EAAQ+B,KACjEyC,qBAAsB,SAACxE,GAAagC,EAASwC,EAAqBxE,KAClEyH,YAAa,WAAQzF,EChNlB,CAAEG,KAAM,kBDiNXwF,YAAa,WAAQ3F,EC7MlB,CAAEG,KAAM,kBD8MX4F,yBAA0B,WAAQ/F,EH5L/B,SAACA,EAAUC,GAEd,IAAIsI,EAAY7H,EAAgB,aAC3B6H,IAAWA,EAAY,IAC5BvI,EAAS,CAAEG,KAAM,8BAA+BoI,mBG2LzChF,CAA6C4B,GE3K7CwD,EAxCY,SAACnL,GAKxB,IAAI6C,EAAW7C,EAAMoL,aAAarG,SAASlC,SACvCrC,EAASR,EAAMoL,aAAarG,SAASvE,OACrCsJ,EAAc9J,EAAMoL,aAAarG,SAAS+E,YAE1CjI,EAAyB7B,EAAMoL,aAAavB,eAAehI,uBAC3DM,EAAuBiE,KAAKC,MARA,EAAI,GAQYxE,EAA+B,EAAI,EAAV,GARhD,KAUrBI,EAA0BjC,EAAMoL,aAAavB,eAAe5H,wBAI5DN,EAAqB3B,EAAMoL,aAAavB,eAAelI,mBACvDF,EAAczB,EAAMoL,aAAavB,eAAepI,YAChDA,EAAc,KAAIA,EAAW,IAAAZ,OAAOY,IAExC,IAAMsI,EAAmB,wEAAAlJ,OAA2EY,EAA3E,UAEnByF,EAA6B,MAAhBlH,EAAMmH,MAAiB,OAAS,GAC7CC,EAAgC,MAAhBpH,EAAMmH,MAAiB,OAAS,GAEtD,OACIlH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,IAAME,GACZP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,WAAM0C,EAAN,KAAkBiH,GAClB7J,EAAAC,EAAAC,cAAA,OAAKC,UAAW8G,GAAYrF,EAAwBI,GACpDhC,EAAAC,EAAAC,cAAA,OAAKC,UAAWgH,GAAejF,EAlBnB,KAmBZlC,EAAAC,EAAAC,cAAA,OAAKoH,IAAKwC,EAAqBvC,MAAO7F,EAAoB+F,IAAK/F,IAC/D1B,EAAAC,EAAAC,cAAA,WAAMwB,OChCpB0J,mLACO,IAAAhG,EAAAM,KACC2F,EAAgB,GAElB3F,KAAK3F,MAAM+H,WAAWrH,QACtBiF,KAAK3F,MAAM+H,WAAWwD,QAAQ,SAACxG,GACvBM,EAAKrF,MAAM6J,eAAenJ,QAC1B2E,EAAKrF,MAAM6J,eAAe0B,QAAQ,SAAA1B,GAC1BA,EAAerJ,SAAWuE,EAASvE,QAAUuE,EAASD,YACtDwG,EAAcE,KAAK,CAAEzG,WAAU8E,uBAOnD,IAAM4B,EAAwBH,EAAc5K,OACxC4K,EAAcnB,IAAI,SAACiB,EAAchB,GAC7B,OACInK,EAAAC,EAAAC,cAACuL,EAAD,CAAoBvE,MAAO9B,EAAKrF,MAAMmH,MAAOiE,aAAcA,EAAcjH,IAAKiG,MAGrFnK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IAAf,0BAEL,OACIH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBACLqL,UA1BM3F,aAwCZC,cARS,SAACb,GACrB,MAAO,CACH6C,WAAY7C,EAAMmD,SAASN,WAC3B8B,eAAgB3E,EAAMxC,QAAQmH,eAC9B1C,MAAMjC,EAAM8F,QAAQC,eAIblF,CAAyBsF,GCrClCM,8LACgB,IAAAtG,EAAAM,KAEdA,KAAK3F,MAAM+K,WAAWpF,KAAK3F,MAAM+K,UAAUQ,QAAQ,SAACK,GAEtD,IAAI7G,EAAWM,EAAKrF,MAAM+H,WAAWY,KAAK,SAAA5D,GAAQ,OAAIA,EAASlC,WAAa+I,IACvE7G,GAIHC,EAAqB4G,GACrBvG,EAAKrF,MAAMsC,WAAWyC,EAASvE,OAAQuE,EAASxC,YAJhD8C,EAAKrF,MAAM6E,YAAY+G,GAAkB,GAAM,gDASlC7C,EAAWC,GAAW,IAAAZ,EAAAzC,KACvCA,KAAK3F,MAAM+H,WAAWwD,QAAQ,SAACxG,GAElBqD,EAAKpI,MAAM+K,UAAUpC,KAAK,SAAA9F,GAAQ,OAAIkC,EAASlC,WAAaA,MAGhEuF,EAAKpI,MAAM0C,SAEQ0F,EAAKpI,MAAM0C,QAAQmH,eAAelB,KAAK,SAAAjG,GAAO,OAAIA,EAAQlC,SAAWuE,EAASvE,UAF7E4H,EAAKpI,MAAMsC,WAAWyC,EAASvE,OAAQuE,EAASxC,+CAS7E,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC0L,EAAD,cAjCgB/F,aAsDTC,cAhBS,SAACb,GACvB,MAAO,CACL6C,WAAY7C,EAAMmD,SAASN,WAC3BgD,UAAW7F,EAAMmD,SAAS0C,UAC1BlB,eAAgB3E,EAAMmD,SAASwB,iBAIR,SAACrH,GAC1B,MAAO,CACLqC,YAAa,SAAChC,EAAUiC,EAAYvC,GAAvB,OAAqCC,EAASqC,EAAYhC,EAAUiC,EAAYvC,KAC7FD,WAAY,SAAC9B,EAAQ+B,GAAgBC,EAASF,EAAW9B,EAAQ+B,KACjEyC,qBAAsB,SAACnC,GAAeL,EAASwC,EAAqBnC,OAIzDkD,CAA6C4F,SCnC7CG,MAhBf,WACE,OACE7L,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAe0L,SAAUC,gBACzB/L,EAAAC,EAAAC,cAAC8L,EAAA,EAAD,MACEhM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+L,EAAD,MACAjM,EAAAC,EAAAC,cAACgM,EAAA,EAAD,KACElM,EAAAC,EAAAC,cAACgM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3E,IACjC1H,EAAAC,EAAAC,cAACgM,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWX,IACpC1L,EAAAC,EAAAC,cAACgM,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAW3E,QCPxB4E,QACW,cAA7BC,OAAOnE,SAASoE,UAEe,UAA7BD,OAAOnE,SAASoE,UAEhBD,OAAOnE,SAASoE,SAAShE,MACvB,qFChBAiE,EAAY,CACd3B,UAAW,GACXzC,mBAAmB,EACnBP,WAAY,GACZe,gBAAiB,WACjB1H,MAAO,IA4EIuL,EAzES,WAA+B,IAA9BzH,EAA8BzE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBiM,EAAWE,EAAWnM,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQiM,EAAOjK,MACX,IAAK,8BAEG,OAAOkK,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEIoD,mBAAmB,EACnByC,UAAW6B,EAAO7B,UAClB3J,MAAO,KAGnB,IAAK,gBAGG,IAAIoI,EAAMqD,OAAAE,EAAA,EAAAF,CAAO3H,EAAM6C,YAGnB6E,EAAO7H,SAASxC,WAAWiH,EAAO+B,QAAQ,SAAA1D,GAAI,OAAIA,EAAKtF,WAAY,IAGvE,IAAIyK,EAAexD,EAAOb,KAAK,SAAA5D,GAAQ,OAAIA,EAASvE,SAAWoM,EAAO7H,SAASvE,SAC/E,OAAKwM,GAODA,EAAazK,UAAYqK,EAAO7H,SAASxC,UAClCsK,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI6C,WAAW8E,OAAAE,EAAA,EAAAF,CAAKrD,GAChBpI,MAAO,MAVJyL,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI6C,WAAU,GAAAlH,OAAAgM,OAAAE,EAAA,EAAAF,CAAMrD,GAAN,CAAcoD,EAAO7H,WAC/B3D,MAAO,KAWvB,IAAK,yBAEG,IAAIoI,EAAMqD,OAAAE,EAAA,EAAAF,CAAO3H,EAAM6C,YAEnBiF,EAAexD,EAAOb,KAAK,SAAA5D,GAAQ,OAAIA,EAASvE,SAAWoM,EAAOpM,SACtEwM,EAAalI,YAAckI,EAAalI,WAGxC,IAAImI,EAAaJ,OAAAE,EAAA,EAAAF,CAAO3H,EAAM6F,WAC1BmC,EAAYD,EAAcE,QAAQH,EAAanK,UAWnD,OARImK,EAAalI,WAEToI,EAAY,IAAGD,EAAa,GAAApM,OAAAgM,OAAAE,EAAA,EAAAF,CAAOI,GAAP,CAAsBD,EAAanK,YAG/DqK,GAAa,GAAGD,EAAcG,OAAOF,EAAW,GAExDjK,EAAc,YAAagK,GACpBJ,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI6F,UAAWkC,EACXlF,WAAW8E,OAAAE,EAAA,EAAAF,CAAKrD,GAChBpI,MAAO,KAGnB,IAAK,iBACD,OAAOyL,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI9D,MAAOkD,KAAKC,UAAUqI,EAAOxL,SAErC,QACI,OAAO8D,IC9EbwH,EAAY,CACd1C,QAAS,GACTC,mBAAoB,GACpBJ,eAAgB,GAChBzI,MAAO,IA8CIiM,EA5CQ,WAA+B,IAA9BnI,EAA8BzE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBiM,EAAWE,EAAWnM,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQiM,EAAOjK,MACX,IAAK,cACD,OAAOkK,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI8E,QAAS4C,EAAO5C,QAAQsD,eACxBrD,mBAAoB2C,EAAO5C,QAAQuD,SAASC,KAC5CpM,MAAM,KAEd,IAAK,cAEG,IAAIqM,EAAWZ,OAAAE,EAAA,EAAAF,CAAO3H,EAAM2E,gBACxB6D,GAAW,EACXC,EAAiBF,EAAYtD,IAAI,SAAAzH,GACjC,OAAIA,EAAQlC,SAAWoM,EAAOlK,QAAQlC,QAClCkN,GAAW,EACJd,EAAOlK,SAENA,IAEhB,OAAIgL,EACOb,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI2E,eAAegD,OAAAE,EAAA,EAAAF,CAAKc,GACpBvM,MAAM,KAGHyL,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI2E,eAAc,GAAAhJ,OAAAgM,OAAAE,EAAA,EAAAF,CAAM3H,EAAM2E,gBAAZ,CAA4B+C,EAAOlK,UACjDtB,MAAM,KAItB,IAAK,gBACD,OAAOyL,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI9D,MAAOkD,KAAKC,UAAUqI,EAAOxL,SAErC,QACI,OAAO8D,IC9CbwH,EAAY,CACdzB,aAAa,IACbC,aAAc,QACd9J,MAAO,IA0BIwM,EAvBQ,WAA+B,IAA9B1I,EAA8BzE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBiM,EAC5B,QADkDjM,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACnCgC,MACX,IAAK,eAEG,IAAIwE,EAA+B,MAAvBjC,EAAM+F,aAAuB,IAAM,IAC/C,OAAO4B,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEI+F,aAAc9D,IAG1B,IAAK,eAEG,IAAIwD,EAA+B,UAAvBzF,EAAMgG,aAA2B,OAAS,QACtD,OAAO2B,OAAAC,EAAA,EAAAD,CAAA,GACA3H,EADP,CAEIgG,aAAcP,IAG1B,QACI,OAAOzF,ICdJ2I,EANKC,0BAAgB,CAChCpL,QAAS2K,EACThF,SAAUsE,EACV3B,QAAS4C,oBCOPG,EAAQC,sBAAYH,EAAaI,8BAAoBC,0BAAgBC,OAG3EC,IAASC,OAAOpO,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAAUP,MAAOA,GAAO9N,EAAAC,EAAAC,cAACoO,EAAD,OAAoBC,SAASC,eAAe,SL8G9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5N,KAAK,SAAA6N,GACjCA,EAAaC","file":"static/js/main.f9f1feda.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className=\"blue darken-2\">\r\n            <div className=\"border-black\">\r\n                <Link to=\"/\" className=\"left brand\">iWeather</Link>\r\n                <ul className=\"right nav-links\">\r\n                    <li><NavLink to=\"/\">Home</NavLink></li>\r\n                    <li><NavLink to=\"/favorites\">Favorites</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import Axios from \"axios\";\r\n\r\nconst getForcast = (cityId = '215854',dispatch) => {\r\n    const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    const FORCAST_URL = 'https://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n    const query = `${FORCAST_URL}${cityId}?apikey=${WEATHER_API_KEY} `;\r\n\r\n    return Axios.get(query)\r\n        .then(result => {\r\n            return result.data\r\n        })\r\n        .catch(error =>  console.log(error))\r\n}\r\nconst getWeather = (cityId = '215854') => {\r\n    const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    const WEATHER_URL = 'https://dataservice.accuweather.com/currentconditions/v1/';\r\n    const query = `${WEATHER_URL}${cityId}?apikey=${WEATHER_API_KEY} `;\r\n\r\n    return Axios.get(query)\r\n        .then(result => {\r\n            let weather = {\r\n                isDayTime: result.data[0].IsDayTime,\r\n                weatherIcon: result.data[0].WeatherIcon,\r\n                weatherDescription: result.data[0].WeatherText,\r\n                temperatureImperialVal: result.data[0].Temperature.Imperial.Value,\r\n                temperatureImperialUnit: result.data[0].Temperature.Imperial.Unit,\r\n                temperatureMetricVal: result.data[0].Temperature.Metric.Value,\r\n                temperatureMetricUnit: result.data[0].Temperature.Metric.Unit,\r\n            }\r\n            return weather\r\n        })\r\n        .catch(error => console.log(error))\r\n}\r\n\r\nexport default {\r\n    getForcast,\r\n    getWeather\r\n}","import WeatherService from '../../services/WeatherService'\r\n\r\nexport const getForcast = (cityId) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getForcast(cityId,dispatch)\r\n            .then(forcast => {\r\n                dispatch({ type: 'SET_FORCAST', forcast })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getWeather = (cityId, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getWeather(cityId)\r\n            .then(weather => {\r\n                weather.cityId = cityId;\r\n                weather.isCurrent = isCurrent;\r\n                dispatch({ type: 'SET_WEATHER', weather })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}","import Axios from \"axios\";\r\n\r\nconst getCityInfoByName = (cityName) => {\r\n  const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII'\r\n  const LOCATION_AUTO_COMPLETE_BASE = 'https://dataservice.accuweather.com/locations/v1/cities/autocomplete'\r\n  const query = `${LOCATION_AUTO_COMPLETE_BASE}?apikey=${WEATHER_API_KEY}&q=${cityName} `\r\n\r\n  return Axios.get(query)\r\n    .then(result => {\r\n      let cityInfo = {\r\n        cityId: result.data[0].Key,\r\n        cityName: result.data[0].LocalizedName\r\n      };\r\n\r\n      return cityInfo\r\n    })\r\n    .catch(error => console.log(error))\r\n}\r\n\r\n\r\nexport default {\r\n  getCityInfoByName\r\n}","\r\nexport default {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    formatTime\r\n}\r\n\r\nexport function saveToStorage(key, value) {\r\n    var str = JSON.stringify(value);\r\n    localStorage.setItem(key, str);\r\n}\r\n\r\nexport function loadFromStorage(key) {\r\n    var str = localStorage.getItem(key);\r\n    if (!str) return undefined;\r\n    return JSON.parse(str);\r\n}\r\n\r\nfunction formatTime(time){\r\n    var hour = new Date(time).getHours();\r\n    //hour += 2; //offset\r\n    var minute = new Date(time).getMinutes();\r\n    var seconds = new Date(time).getSeconds();\r\n    var day = new Date(time).getDate();\r\n    var month = new Date(time).getMonth() + 1;\r\n    var year = new Date(time).getFullYear();\r\n    return day + '/' + month + '/' + year + '  ' + _pad(hour) + ':' + _pad(minute) + ':' + _pad(seconds);\r\n}\r\nfunction _pad(n) {\r\n    return n < 10 ? '0' + n : n;\r\n}","import LocationService from '../../services/LocationService'\r\nimport { loadFromStorage } from '../../services/utilService'\r\n\r\nexport const getCityInfo = (cityName, isFavorite, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        LocationService.getCityInfoByName(cityName)\r\n            .then(cityInfo => {\r\n                cityInfo.isFavorite = isFavorite;\r\n                cityInfo.isCurrent = isCurrent;\r\n                if (cityName === 'Madrid') dispatch({ type: 'LOCATION_ERROR', error: cityName })\r\n                else dispatch({ type: 'SET_CITY_INFO', cityInfo })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'LOCATION_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const toggleFavoriteStatus = (cityId) => {\r\n    return { type: 'TOGGLE_FAVORITE_STATUS', cityId }\r\n}\r\n\r\nexport const loadFavoritesFromStorage = () => {\r\n    return (dispatch, getState) => {\r\n        //async code - accessing location service\r\n        let favorites = loadFromStorage('favorites')\r\n        if (!favorites) favorites = [];\r\n        dispatch({ type: 'LOAD_FAVORITES_FROM_STORAGE', favorites })\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCityInfo } from '../store/actions/locationActions'\r\n\r\nclass Filter extends Component {\r\n    state = {\r\n        cityName: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            cityName:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.getCityInfo(this.state.cityName,false,true);\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"container filter-container\">\r\n                <input type=\"text\" placeholder=\"Search for weather location\" onChange={this.handleChange} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n//allow component to dispach action to set the store\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName,isFavorite,isCurrent) => dispatch(getCityInfo(cityName,isFavorite,isCurrent))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(Filter)","import React from 'react'\r\n\r\nconst SingleDaySummary = (props) => {\r\n    const { day } = props\r\n\r\n    const maxImperialVal = day.Temperature.Maximum.Value;\r\n    const maxMetricVal = Math.round(toCelsius(day.Temperature.Maximum.Value))\r\n\r\n    const minImperialVal = day.Temperature.Minimum.Value;\r\n    const minMetriclVal = Math.round(toCelsius(day.Temperature.Minimum.Value))\r\n\r\n    const ImperialUnit = day.Temperature.Maximum.Unit;\r\n    const MetricUnit = 'C';\r\n\r\n\r\n    let dayIcon = day.Day.Icon;\r\n    if (dayIcon < 10) dayIcon = `0${dayIcon}`\r\n\r\n    let nightIcon = day.Night.Icon;\r\n    if (nightIcon < 10) nightIcon = `0${nightIcon}`\r\n\r\n    const DAY_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${dayIcon}-s.png`;\r\n    const NIGHT_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${nightIcon}-s.png`;\r\n\r\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n    const isCelsius = (props.scale === 'c') ? 'hide' : '';\r\n    const isFahrenheit = (props.scale !== 'c') ? 'hide' : '';\r\n\r\n    function toCelsius(fahrenheit) {\r\n        return (fahrenheit - 32) * (5 / 9)\r\n    }\r\n    return (\r\n        <div className=\"card week-day\" >\r\n            <div className=\"card-content\">\r\n                <div className=\"card-title\">{weekdays[new Date(day.Date).getDay()]}</div>\r\n                <img src={DAY_URL} title={props.day.Day.IconPhrase} alt={props.day.Day.IconPhrase} />\r\n                <p className={isCelsius}>Max {maxImperialVal}{ImperialUnit}</p>\r\n                <p className={isFahrenheit}>Max {maxMetricVal}{MetricUnit}</p>\r\n                <hr />\r\n                <img src={NIGHT_URL} title={props.day.Night.IconPhrase} alt={props.day.Night.IconPhrase} />\r\n                <p className={isCelsius}>Min {minImperialVal}{ImperialUnit}</p>\r\n                <p className={isFahrenheit}>Min {minMetriclVal}{MetricUnit}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDaySummary","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getForcast, getWeather } from '../store/actions/weatherActions'\r\nimport { getCityInfo, toggleFavoriteStatus, loadFavoritesFromStorage } from '../store/actions/locationActions'\r\nimport { toggleScale, toggleTheme } from '../store/actions/settingActions'\r\nimport utilService from '../services/utilService'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { toast } from 'react-toastify';\r\nimport Filter from './Filter'\r\nimport SingleDaySummary from './SingleDaySummary'\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        if (!this.props.location.isFavoritesLoaded) {\r\n            this.props.loadFavoritesFromStorage()\r\n        };\r\n\r\n        //if arrived to this page from selection in favorite Page\r\n        let selectedId = this.props.match.params.cityId;\r\n        if (selectedId) {\r\n            let cityInfo = this.props.citiesInfo.find(city => city.cityId === selectedId)\r\n            if (cityInfo) this.props.getCityInfo(cityInfo.cityName, true, true);\r\n        }\r\n\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) {\r\n            let favoriteList = utilService.loadFromStorage('favorites');\r\n            if (favoriteList) {\r\n                let isFavorite = favoriteList.find(favoriteCity => favoriteCity === this.props.defaultCityName)\r\n                this.props.getCityInfo(this.props.defaultCityName, isFavorite ? true : false, true)\r\n            } else {\r\n\r\n                this.props.getCityInfo(this.props.defaultCityName, false, true)\r\n            }\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //check if the previouse cityInfo isCurrent\r\n        let cityInfoPrev = prevProps.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //check if the current cityInfo isCurrent\r\n        let cityInfoCurrent = this.props.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //if before no cityInfo and now there is: send request to weather and forcast\r\n        if (!cityInfoPrev.length && cityInfoCurrent.length) {\r\n            this.props.getForcast(cityInfoCurrent[0].cityId);\r\n            this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n\r\n            //if prev cityId not the same as current cityId: send request to weather and forcast\r\n        } else if (cityInfoPrev.length && cityInfoCurrent.length) {\r\n            if (cityInfoPrev[0].cityId !== cityInfoCurrent[0].cityId) {\r\n                this.props.getForcast(cityInfoCurrent[0].cityId);\r\n                this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n            }\r\n        }\r\n\r\n        //handle location errors\r\n        if ((prevProps.locationError !== this.props.locationError) &&\r\n            this.props.locationError !== '') {\r\n            this.notify(this.props.locationError)\r\n        }\r\n        //handle weather errors\r\n        if ((prevProps.weatherError !== this.props.weatherError) &&\r\n            this.props.weatherError !== '') {\r\n            this.notify(this.props.weatherError)\r\n        }\r\n    }\r\n    handleToggleFavorite = () => {\r\n        let city = this._getCurrentCity(this.props.citiesInfo);\r\n        this.props.toggleFavoriteStatus(city.cityId)\r\n    }\r\n    _getCurrentCity(cities) {\r\n        let currentCity = cities.filter(city => city.isCurrent)\r\n        if (currentCity.length) return currentCity[0];\r\n        else return null;\r\n    }\r\n    isCurrentFavorite() {\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) return false;\r\n        else {\r\n            if (currentCity.isFavorite) {\r\n                return true;\r\n            }\r\n            else return false;\r\n        }\r\n    }\r\n    isCurrentCelsius() {\r\n        return this.props.scale === 'c'\r\n    }\r\n    handleToggleScale = () => {\r\n        this.props.toggleScale()\r\n    }\r\n    handleToggleTheme = () => {\r\n        this.props.toggleTheme()\r\n    }\r\n    notify(msg) {\r\n        toast(msg)\r\n    }\r\n    render() {\r\n        //extracting WEATHER from props\r\n        let currentWeather = this.props.currentWeather.filter(weather => weather.isCurrent)\r\n        let weatherIcon, weatherDescription, temperatureImperialVal, temperatureImperialUnit;\r\n        let temperatureMetricUnit, temperatureMetricVal; //, isDayTime\r\n        if (currentWeather.length) {\r\n            weatherDescription = currentWeather[0].weatherDescription;\r\n\r\n            temperatureImperialVal = currentWeather[0].temperatureImperialVal;\r\n            temperatureImperialUnit = currentWeather[0].temperatureImperialUnit;\r\n\r\n            temperatureMetricVal = currentWeather[0].temperatureMetricVal;\r\n            temperatureMetricUnit = currentWeather[0].temperatureMetricUnit;\r\n\r\n            weatherIcon = currentWeather[0].weatherIcon;\r\n            if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n        }\r\n        const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n        //extracting current cityInfo from props\r\n        let cityInfo = this.props.citiesInfo.find(city => {\r\n            if (city === undefined) return false\r\n            return city.isCurrent\r\n        });\r\n\r\n        let countryName, cityName;\r\n        if (cityInfo) {\r\n            countryName = cityInfo.countryName;\r\n            cityName = cityInfo.cityName;\r\n        }\r\n\r\n        //extracting forcast from props\r\n        const { forcast } = this.props;\r\n        const { forcastDescription } = this.props;\r\n\r\n        //Creating forcast\r\n        const dayList = forcast ? (\r\n            forcast.map((day, index) => {\r\n                return (\r\n                    <SingleDaySummary scale={this.props.scale} day={day} key={index} />\r\n                )\r\n            })\r\n        ) : (<h4>There is currently no forcast show</h4>)\r\n\r\n\r\n        const isCelsius = (this.isCurrentCelsius()) ? 'hide' : '';\r\n        const isFahrenheit = (!this.isCurrentCelsius()) ? 'hide' : '';\r\n        const toggleScale = (this.isCurrentCelsius()) ? 'F' : 'C';\r\n        const toggleAddFavorite = (this.isCurrentFavorite()) ? 'Remove Favorite' : 'Add to Favorites';\r\n        const colorIsFavorite = (this.isCurrentFavorite()) ? { color: 'red' } : { color: 'grey' };\r\n        const toggleTheme = (this.props.theme==='light') ? 'D' : 'L';\r\n\r\n        return (\r\n            <div className=\"main-container\" >\r\n                <Filter />\r\n                <div className=\"flex-space-between\">\r\n                    <div className=\"flex curr-city\">\r\n                        <img className=\"large-image\" src={CURRENT_WEATHER_URL}\r\n                            title={weatherDescription} alt={weatherDescription} />\r\n                        <div className=\"flex-col\">\r\n                            <div>{cityName}, {countryName}</div>\r\n                            <div className={isCelsius}>{temperatureImperialVal}{temperatureImperialUnit}</div>\r\n                            <div className={isFahrenheit}>{temperatureMetricVal}{temperatureMetricUnit}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex centered add-fav\">\r\n                        <i className=\"small material-icons\" style={colorIsFavorite}>favorite</i>\r\n                        <button className=\"btn toggle-fav blue darken-2\" onClick={this.handleToggleFavorite}>{toggleAddFavorite}</button>\r\n                        <div className=\"right setting-action\">\r\n                            <button className=\"btn toggle-setting blue darken-2\" title=\"Temperature System [Fahrenheit \\ Celsius]\" onClick={this.handleToggleScale}>{toggleScale}</button>\r\n                            <button className=\"btn toggle-setting blue darken-2\" title=\"Change Theme [Dark \\ Light]\" onClick={this.handleToggleTheme}>{toggleTheme}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"center main-description\">{weatherDescription}</div>\r\n                <ul className=\"forcast-list\">\r\n                    {dayList}\r\n                </ul>\r\n                <p className=\"center blue-text darken-2 secondary-description\">{forcastDescription}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        defaultCityName: state.location.defaultCityName,\r\n        isFavoritesLoaded: state.location.isFavoritesLoaded,\r\n        favorites: state.location.favorites,\r\n        forcast: state.weather.forcast,\r\n        forcastDescription: state.weather.forcastDescription,\r\n        currentWeather: state.weather.currentWeather,\r\n        weatherError: state.weather.error,\r\n        locationError: state.location.error,\r\n        scale: state.setting.currentScale,\r\n        theme: state.setting.currentTheme\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n        getForcast: (cityId) => { dispatch(getForcast(cityId)) },\r\n        getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n        toggleFavoriteStatus: (cityId) => { dispatch(toggleFavoriteStatus(cityId)) },\r\n        toggleScale: () => { dispatch(toggleScale()) },\r\n        toggleTheme: () => { dispatch(toggleTheme()) },\r\n        loadFavoritesFromStorage: () => { dispatch(loadFavoritesFromStorage()) }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","export const toggleScale = () => {\r\n    return { type: 'TOGGLE_SCALE' }\r\n}\r\n\r\nexport const toggleTheme = () => {\r\n    return { type: 'TOGGLE_THEME' }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SingleFavoriteItem = (props) => {\r\n    function toCelsius(fahrenheit) {\r\n        return (fahrenheit - 32) * (5 / 9)\r\n    }\r\n\r\n    let cityName = props.composedInfo.cityInfo.cityName;\r\n    let cityId = props.composedInfo.cityInfo.cityId;\r\n    let countryName = props.composedInfo.cityInfo.countryName;\r\n\r\n    let temperatureImperialVal = props.composedInfo.currentWeather.temperatureImperialVal;\r\n    let temperatureMetricVal = Math.round(toCelsius(temperatureImperialVal - 32 * (5 / 9)))\r\n\r\n    let temperatureImperialUnit = props.composedInfo.currentWeather.temperatureImperialUnit;\r\n    let temperatureMetricUnit = 'C';\r\n\r\n\r\n    let weatherDescription = props.composedInfo.currentWeather.weatherDescription;\r\n    let weatherIcon = props.composedInfo.currentWeather.weatherIcon;\r\n    if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n\r\n    const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n    const isCelsius = (props.scale === 'c') ? 'hide' : '';\r\n    const isFahrenheit = (props.scale !== 'c') ? 'hide' : '';\r\n\r\n    return (\r\n        <Link to={'/' + cityId}>\r\n            <div className=\"card\" >\r\n                <div className=\"card-content\">\r\n                    <div>{cityName}, {countryName}</div>\r\n                    <div className={isCelsius}>{temperatureImperialVal}{temperatureImperialUnit}</div>\r\n                    <div className={isFahrenheit}>{temperatureMetricVal}{temperatureMetricUnit}</div>\r\n                    <img src={CURRENT_WEATHER_URL} title={weatherDescription} alt={weatherDescription} />\r\n                    <div>{weatherDescription}</div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default SingleFavoriteItem","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SingleFavoriteItem from './SingleFavoriteItem'\r\n\r\nclass FavoriteList extends Component {\r\n    render() {\r\n        const favoritesInfo = [];\r\n        //composing an object that have cityInfo and weater (only if favorite)\r\n        if (this.props.citiesInfo.length) {\r\n            this.props.citiesInfo.forEach((cityInfo) => {\r\n                if (this.props.currentWeather.length) {\r\n                    this.props.currentWeather.forEach(currentWeather => {\r\n                        if (currentWeather.cityId === cityInfo.cityId && cityInfo.isFavorite) {\r\n                            favoritesInfo.push({ cityInfo, currentWeather })\r\n                        }\r\n                    })\r\n                 }\r\n            })\r\n        }\r\n\r\n        const favoritesInfoToRender = favoritesInfo.length ? (\r\n            favoritesInfo.map((composedInfo, index) => {\r\n                return (\r\n                    <SingleFavoriteItem scale={this.props.scale} composedInfo={composedInfo} key={index} />\r\n                )\r\n            })\r\n        ) : (<div className=\"\" >No Favorites Selected </div>)\r\n        \r\n        return (\r\n            <ul className=\"forcast-list center\">          \r\n                    {favoritesInfoToRender}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        currentWeather: state.weather.currentWeather,\r\n        scale:state.setting.currentScale\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FavoriteList)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport FavoriteList from './FavoriteList'\r\nimport { getCityInfo, toggleFavoriteStatus } from '../store/actions/locationActions'\r\nimport { getWeather } from '../store/actions/weatherActions'\r\n\r\n// const Favorites = (props) =>{\r\nclass Favorites extends Component {\r\n  componentDidMount() {\r\n    //sending request for cityInfo \r\n    if (this.props.favorites) this.props.favorites.forEach((favoriteCityName) => {\r\n      //check if iterated city isCurrent\r\n      let cityInfo = this.props.citiesInfo.find(cityInfo => cityInfo.cityName === favoriteCityName);\r\n      if (!cityInfo) {\r\n        this.props.getCityInfo(favoriteCityName, true, false)\r\n      }\r\n      else {//city in cityInfo Array, not marked as favorite, but is in the favorites\r\n        toggleFavoriteStatus(favoriteCityName)\r\n        this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n      }\r\n    })\r\n  }\r\n  //sending request for forcast if cityInfo is a favorite\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.props.citiesInfo.forEach((cityInfo) => {\r\n      //if cityInfo exists and it is favorite\r\n      let city = this.props.favorites.find(cityName => cityInfo.cityName === cityName)\r\n      if (city) {\r\n        //if city dont have weather, request one\r\n        if (!this.props.weather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        else {\r\n          let selectedWeather = this.props.weather.currentWeather.find(weather => weather.cityId === cityInfo.cityId)\r\n          if (!selectedWeather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <FavoriteList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    citiesInfo: state.location.citiesInfo,\r\n    favorites: state.location.favorites,\r\n    currentWeather: state.location.currentWeather\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n    getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n    toggleFavoriteStatus: (cityName) => { dispatch(toggleFavoriteStatus(cityName)) },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites)","import React from 'react';\nimport Navbar from './cmps/Navbar'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './cmps/Home';\nimport Favorites from './cmps/Favorites';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css'; \n\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <ToastContainer />\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/favorites\" component={Favorites} />\n          <Route path=\"/:cityId\" component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { saveToStorage } from '../../services/utilService'\r\n\r\nconst initState = {\r\n    favorites: [],//City names\r\n    isFavoritesLoaded: false,\r\n    citiesInfo: [],\r\n    defaultCityName: 'Tel Aviv',\r\n    error: ''\r\n}\r\n\r\nconst locationReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'LOAD_FAVORITES_FROM_STORAGE':\r\n            {\r\n                return {\r\n                    ...state,\r\n                    isFavoritesLoaded: true,\r\n                    favorites: action.favorites,\r\n                    error: ''\r\n                }\r\n            }\r\n        case 'SET_CITY_INFO':\r\n            {\r\n                //check if cityInfo exists\r\n                let cities = [...state.citiesInfo];\r\n\r\n                //if arrived city isCurrent, set all cities to NOT current\r\n                if (action.cityInfo.isCurrent) cities.forEach(city => city.isCurrent = false)\r\n\r\n                //check if the arrived city is in the array\r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityInfo.cityId);\r\n                if (!selectedCity) {\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities, action.cityInfo],\r\n                        error: ''\r\n                    }\r\n                } else {\r\n                    selectedCity.isCurrent = action.cityInfo.isCurrent;\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities],\r\n                        error: ''\r\n                    }\r\n                }\r\n            }\r\n        case 'TOGGLE_FAVORITE_STATUS':\r\n            {\r\n                let cities = [...state.citiesInfo];\r\n                //change the FAVORITE attribute \r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityId);\r\n                selectedCity.isFavorite = !selectedCity.isFavorite;\r\n\r\n                //check if cityName exists in the favorites\r\n                let favoriteNames = [...state.favorites];\r\n                let cityIndex = favoriteNames.indexOf(selectedCity.cityName);\r\n\r\n                //if it has been selected as favorite\r\n                if (selectedCity.isFavorite) {\r\n                    //insert to favorites if not exists\r\n                    if (cityIndex < 0) favoriteNames = [...favoriteNames, selectedCity.cityName];\r\n                } else {\r\n                    //if it has been selected as NOT favorite\r\n                    if (cityIndex >= 0) favoriteNames.splice(cityIndex, 1);\r\n                }\r\n                saveToStorage('favorites', favoriteNames)\r\n                return {\r\n                    ...state,\r\n                    favorites: favoriteNames,\r\n                    citiesInfo: [...cities],\r\n                    error: ''\r\n                }\r\n            }\r\n        case 'LOCATION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: JSON.stringify(action.error)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default locationReducer","\r\nconst initState = {\r\n    forcast: [],\r\n    forcastDescription: '',\r\n    currentWeather: [],\r\n    error: '',\r\n}\r\nconst weatherReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_FORCAST':\r\n            return {\r\n                ...state,\r\n                forcast: action.forcast.DailyForecasts,\r\n                forcastDescription: action.forcast.Headline.Text,\r\n                error:''\r\n            }\r\n        case 'SET_WEATHER':\r\n            {\r\n                let weatherList = [...state.currentWeather];\r\n                let isExists = false;\r\n                let updatedWeather = weatherList.map(weather => {\r\n                    if (weather.cityId === action.weather.cityId) {\r\n                        isExists = true;\r\n                        return action.weather;\r\n                    }\r\n                    else return weather;\r\n                })\r\n                if (isExists) {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...updatedWeather],\r\n                        error:''\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...state.currentWeather, action.weather],\r\n                        error:''\r\n                    }\r\n                }\r\n            }\r\n        case 'WEATHER_ERROR':\r\n            return {\r\n                ...state,\r\n                error: JSON.stringify(action.error)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer","\r\nconst initState = {\r\n    currentScale:'c',\r\n    currentTheme: 'light',\r\n    error: ''\r\n}\r\n\r\nconst settingReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_SCALE':\r\n            {\r\n                let scale = state.currentScale === 'f' ? 'c' : 'f';\r\n                return {\r\n                    ...state,\r\n                    currentScale: scale\r\n                }\r\n            }\r\n        case 'TOGGLE_THEME':\r\n            {\r\n                let theme = state.currentTheme === 'light' ? 'dark' : 'light';\r\n                return {\r\n                    ...state,\r\n                    currentTheme: theme\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default settingReducer","import locationReducer from './locationReducer'\r\nimport weatherReducer from './weatherReducer'\r\nimport settingReducer from './settingReducer'\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weatherReducer,\r\n    location: locationReducer,\r\n    setting: settingReducer\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/libs/animate.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore,applyMiddleware } from 'redux'//compose changed for composeWithDevTools\nimport { Provider } from 'react-redux'\nimport rootReducer from  './store/reducers/rootReducer'\n//enable async operation and call external services/db from within the action creator.\n//instead of returning an action, we will return a function, thus hulting the dispach operation\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// const store = createStore(rootReducer,applyMiddleware(thunk),composeWithDevTools());\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}