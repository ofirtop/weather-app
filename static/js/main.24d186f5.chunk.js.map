{"version":3,"sources":["cmps/Navbar.js","services/LocationService.js","services/utilService.js","store/actions/locationActions.js","cmps/Filter.js","cmps/SingleDaySummary.js","services/WeatherService.js","store/actions/weatherActions.js","cmps/Home.js","cmps/SingleFavoriteItem.js","cmps/FavoriteList.js","cmps/Favorites.js","App.js","serviceWorker.js","store/reducers/locationReducer.js","store/reducers/weatherReducer.js","store/reducers/rootReducer.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","fakeCityInfoRes1","Version","Key","Type","Rank","LocalizedName","Country","ID","AdministrativeArea","fakeCityInfoRes2","fakeCityInfoRes3","fakeCityInfoRes4","fakeCityInfoRes5","fakeCityInfoRes6","LocationService","cityName","cityInfo1","countryName","cityId","cityInfo2","cityInfo3","cityInfo4","cityInfo5","cityInfo6","Promise","resolve","saveToStorage","key","value","console","log","str","JSON","stringify","localStorage","setItem","loadFromStorage","getItem","parse","getCityInfo","isFavorite","isCurrent","dispatch","getState","then","cityInfo","concat","type","catch","error","toggleFavoriteStatus","Filter","state","handleChange","e","_this","setState","target","handleSubmit","preventDefault","props","onSubmit","this","placeholder","onChange","Component","connect","SingleDaySummary","day","dayIcon","Day","Icon","nightIcon","Night","DAY_URL","NIGHT_URL","Date","getDay","src","title","IconPhrase","alt","Temperature","Maximum","Value","Unit","Minimum","fake5DaysForcast","Headline","EffectiveDate","EffectiveEpochDate","Severity","Text","Category","EndDate","EndEpochDate","MobileLink","Link","DailyForecasts","EpochDate","UnitType","HasPrecipitation","Sources","fakeCurrentForcastFalse","LocalObservationDateTime","EpochTime","WeatherText","WeatherIcon","PrecipitationType","IsDayTime","Metric","Imperial","WeatherService","arguments","length","undefined","weather","isDayTime","weatherIcon","weatherDescription","temperatureImperialVal","temperatureImperialUnit","temperatureMetricVal","temperatureMetricUnit","getWeather","Home","handleToggleFavorite","city","_getCurrentCity","citiesInfo","location","isFavoritesLoaded","loadFavoritesFromStorage","selectedId","match","params","find","filter","defaultCityName","prevProps","prevState","cityInfoPrev","cityInfoCurrent","getForcast","cities","currentCity","currentWeather","CURRENT_WEATHER_URL","forcast","forcastDescription","dayList","forcastError","currentWeatherError","map","index","cmps_SingleDaySummary","toggleAddFavorite","isCurrentFavorite","colorIsFavorite","color","cmps_Filter","style","onClick","favorites","SingleFavoriteItem","composedInfo","FavoriteList","favoritesInfo","forEach","push","favoritesInfoToRender","cmps_SingleFavoriteItem","Favorites","favoriteCityName","_this2","CityName","cmps_FavoriteList","App","cmps_Navbar","react_router","exact","path","component","Boolean","window","hostname","initState","errorReceived","locationReducer","action","Object","objectSpread","toConsumableArray","selectedCity","favoriteNames","cityIndex","indexOf","splice","weatherError","weatherReducer","payload","weatherList","isExists","updatedWeather","currentForcastError","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","composeWithDevTools","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24d186f5.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nconst Navbar = () =>{\r\n    return (\r\n        <nav className=\"blue darken-2\">\r\n            <div>\r\n                <Link to=\"/\" className=\"left brand\">Topaz's Weather</Link>\r\n                <ul className=\"right nav-links\">\r\n                   <li><NavLink to=\"/\">Home</NavLink></li> \r\n                   <li><NavLink to=\"/favorites\">Favorites</NavLink></li> \r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","// import Axios from \"axios\";\r\nvar fakeCityInfoRes1 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215854\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Tel Aviv\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes2 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215855\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Madrid\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes3 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215856\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Barcelona\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes4 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215857\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Canbara\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes5 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215858\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"San Francisoco\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes6 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215859\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Jerusalem\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\n\r\nconst getCityInfoByName = (cityName) => {\r\n  //BEFORE PRODUCTION - OPEN THIS LINES\r\n  // const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII'\r\n  // const LOCATION_AUTO_COMPLETE_BASE = 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete'\r\n  // const query = `${LOCATION_AUTO_COMPLETE_BASE}?apikey=${WEATHER_API_KEY}&q=${cityName} `\r\n\r\n  // return Axios.get(query)\r\n  // .then(result =>{\r\n  //     let cityInfo = {\r\n  //         // countryName : result.data[0].Country.LocalizedName,\r\n  //         cityId : result.data[0].Key,\r\n  //         cityName : result.data[0].LocalizedName\r\n  //     };\r\n\r\n  //     console.log(`getCityInfoByName: cityName: ${cityName}, result: ${cityInfo}` )\r\n  //     return cityInfo\r\n  // })\r\n  // .catch(error =>{\r\n  //     console.log('getCityInfoByName Error : ',error)\r\n  // })\r\n\r\n  //BEFORE PRODUCTION - DELETE THIS LINE\r\n  let cityInfo1 = {\r\n    countryName: fakeCityInfoRes1[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes1[0].Key,\r\n    cityName: fakeCityInfoRes1[0].LocalizedName\r\n  };\r\n  let cityInfo2 = {\r\n    countryName: fakeCityInfoRes2[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes2[0].Key,\r\n    cityName: fakeCityInfoRes2[0].LocalizedName\r\n  };\r\n  let cityInfo3 = {\r\n    countryName: fakeCityInfoRes3[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes3[0].Key,\r\n    cityName: fakeCityInfoRes3[0].LocalizedName\r\n  };\r\n  let cityInfo4 = {\r\n    countryName: fakeCityInfoRes4[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes4[0].Key,\r\n    cityName: fakeCityInfoRes4[0].LocalizedName\r\n  };\r\n  let cityInfo5 = {\r\n    countryName: fakeCityInfoRes5[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes5[0].Key,\r\n    cityName: fakeCityInfoRes5[0].LocalizedName\r\n  };\r\n  let cityInfo6 = {\r\n    countryName: fakeCityInfoRes6[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes6[0].Key,\r\n    cityName: fakeCityInfoRes6[0].LocalizedName\r\n  };\r\n\r\n  switch (cityName) {\r\n    case '1':\r\n    case 'Tel Aviv':\r\n    case '215854':\r\n      return Promise.resolve(cityInfo1)//215854 Tel Aviv\r\n    case '2':\r\n    case 'Madrid':\r\n    case '215855':\r\n      return Promise.resolve(cityInfo2)//215855 Madrid\r\n    case '3':\r\n    case 'Barcelona':\r\n    case '215856':\r\n      return Promise.resolve(cityInfo3)//215856 Barcelona\r\n    case '4':\r\n    case 'Canbara':\r\n    case '215857':\r\n      return Promise.resolve(cityInfo4)//215857 Canbara\r\n    case '5':\r\n    case 'San Francisoco':\r\n    case '215858':\r\n      return Promise.resolve(cityInfo5)//215858 San Francisoco\r\n    case '6':\r\n    case 'Jerusalem':\r\n    case '215859':\r\n      return Promise.resolve(cityInfo6)//215859 Jerusalem\r\n    default:\r\n      return Promise.resolve(cityInfo6)\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default {\r\n  getCityInfoByName\r\n}","\r\nexport default {\r\n    getRandomIntInclusive,\r\n    makeId,\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    formatTime\r\n}\r\n\r\nfunction getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \r\n}\r\n\r\nfunction makeId(length) {\r\n\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nexport function saveToStorage(key, value) {\r\n    console.log(\"LOCALSTORAGE GETS:\", value)\r\n    var str = JSON.stringify(value);\r\n    localStorage.setItem(key, str);\r\n}\r\n\r\nexport function loadFromStorage(key) {\r\n    var str = localStorage.getItem(key);\r\n    if (!str) return undefined;\r\n    return JSON.parse(str);\r\n}\r\n\r\nfunction formatTime(time){\r\n    var hour = new Date(time).getHours();\r\n    //hour += 2; //offset\r\n    var minute = new Date(time).getMinutes();\r\n    var seconds = new Date(time).getSeconds();\r\n    var day = new Date(time).getDate();\r\n    var month = new Date(time).getMonth() + 1;\r\n    var year = new Date(time).getFullYear();\r\n    return day + '/' + month + '/' + year + '  ' + _pad(hour) + ':' + _pad(minute) + ':' + _pad(seconds);\r\n}\r\nfunction _pad(n) {\r\n    return n < 10 ? '0' + n : n;\r\n}","import LocationService from '../../services/LocationService'\r\nimport { saveToStorage, loadFromStorage } from '../../services/utilService'\r\n\r\nexport const getCityInfo = (cityName, isFavorite, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        //async code - accessing location service\r\n        // console.log('isCurrent',isCurrent);\r\n        // console.log('isFavorite',isFavorite);\r\n        console.log('getCityInfo about to call the service')\r\n        LocationService.getCityInfoByName(cityName)\r\n            .then(cityInfo => {\r\n                cityInfo.isFavorite = isFavorite;\r\n                cityInfo.isCurrent = isCurrent;\r\n                console.log(`Service Response: cityInfo: ${cityInfo} `)\r\n                dispatch({ type: 'SET_CITY_INFO', cityInfo })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'SET_CITY_INFO_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const toggleFavoriteStatus = (cityId) => {\r\n    console.log(cityId)\r\n    return { type: 'TOGGLE_FAVORITE_STATUS', cityId }\r\n}\r\n\r\nexport const loadFavoritesFromStorage = () => {\r\n    return (dispatch, getState) => {\r\n        //async code - accessing location service\r\n        let favorites = loadFromStorage('favorites')\r\n        if (!favorites) favorites = [];\r\n        dispatch({ type: 'LOAD_FAVORITES_FROM_STORAGE', favorites })\r\n    }\r\n}\r\n\r\n// export const isFavoritesLoaded = () =>{\r\n//     return { type: 'SET_FAVORITE_LOADED' }\r\n// }","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCityInfo } from '../store/actions/locationActions'\r\n\r\nclass Filter extends Component {\r\n    state = {\r\n        cityName: ''\r\n    }\r\n    handleChange = (e) => {\r\n        // this.state.context = e.target.value\r\n        this.setState({\r\n            cityName:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.getCityInfo(this.state.cityName,false,true);\r\n        console.log(`just submited to getCityInfo. cityName:${this.state.cityName}`)\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"container\">\r\n                <input type=\"text\" placeholder=\"Search for weather location\" onChange={this.handleChange} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n//allow component to dispach action to set the store\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName,isFavorite,isCurrent) => dispatch(getCityInfo(cityName,isFavorite,isCurrent))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(Filter)","import React from 'react'\r\n\r\nconst SingleDaySummary = (props) => {\r\n    const { day } = props    \r\n    let dayIcon = day.Day.Icon;\r\n    if(dayIcon<10) dayIcon = `0${dayIcon}`\r\n    \r\n    let nightIcon = day.Night.Icon;\r\n    if(nightIcon<10) nightIcon = `0${nightIcon}`\r\n\r\n    const DAY_URL   = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${dayIcon}-s.png`;\r\n    const NIGHT_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${nightIcon}-s.png`;\r\n    \r\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n    return (\r\n        <div className=\"card week-day\" >\r\n            <div className=\"card-content\">\r\n                <div className=\"card-title\">{weekdays[new Date(day.Date).getDay()]}</div>  \r\n                <img src={DAY_URL} title={props.day.Day.IconPhrase} alt={props.day.Day.IconPhrase}/>                 \r\n                <p>Max {day.Temperature.Maximum.Value}{day.Temperature.Maximum.Unit}</p>\r\n                <hr/>\r\n                <img src={NIGHT_URL} title={props.day.Night.IconPhrase} alt={props.day.Night.IconPhrase}/>                 \r\n                <p>Min {day.Temperature.Minimum.Value}{day.Temperature.Minimum.Unit}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDaySummary","// import Axios from \"axios\";\r\n// import './fiveDaysWeather.json'\r\n\r\nvar fake5DaysForcast = {\r\n    \"Headline\": {\r\n        \"EffectiveDate\": \"2019-08-03T08:00:00+03:00\",\r\n        \"EffectiveEpochDate\": 1564808400,\r\n        \"Severity\": 4,\r\n        \"Text\": \"Pleasant this weekend\",\r\n        \"Category\": \"\",\r\n        \"EndDate\": null,\r\n        \"EndEpochDate\": null,\r\n        \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/extended-weather-forecast/215854?lang=en-us\",\r\n        \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?lang=en-us\"\r\n    },\r\n    \"DailyForecasts\": [\r\n        {\r\n            \"Date\": \"2019-07-31T07:00:00+03:00\",\r\n            \"EpochDate\": 1564545600,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 177,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 192,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 1,\r\n                \"IconPhrase\": \"Sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 34,\r\n                \"IconPhrase\": \"Mostly clear\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=1&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=1&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-01T07:00:00+03:00\",\r\n            \"EpochDate\": 1564632000,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 78,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 88,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 2,\r\n                \"IconPhrase\": \"Mostly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 35,\r\n                \"IconPhrase\": \"Partly cloudy\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=2&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=2&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-02T07:00:00+03:00\",\r\n            \"EpochDate\": 1564718400,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 76,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 89,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 3,\r\n                \"IconPhrase\": \"Partly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 34,\r\n                \"IconPhrase\": \"Mostly clear\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=3&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=3&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-03T07:00:00+03:00\",\r\n            \"EpochDate\": 1564804800,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 79,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 89,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 2,\r\n                \"IconPhrase\": \"Mostly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 35,\r\n                \"IconPhrase\": \"Partly cloudy\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=4&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=4&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-04T07:00:00+03:00\",\r\n            \"EpochDate\": 1564891200,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 77,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 90,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 2,\r\n                \"IconPhrase\": \"Mostly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 34,\r\n                \"IconPhrase\": \"Mostly clear\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=5&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=5&lang=en-us\"\r\n        }\r\n    ]\r\n}\r\n\r\nvar fakeCurrentForcastFalse = [\r\n    {\r\n        \"LocalObservationDateTime\": \"2019-08-02T10:01:00+03:00\",\r\n        \"EpochTime\": 1564729260,\r\n        \"WeatherText\": \"Clouds and sun\",\r\n        \"WeatherIcon\": 4,\r\n        \"HasPrecipitation\": false,\r\n        \"PrecipitationType\": null,\r\n        \"IsDayTime\": true,\r\n        \"Temperature\": {\r\n            \"Metric\": {\r\n                \"Value\": 30.1,\r\n                \"Unit\": \"C\",\r\n                \"UnitType\": 17\r\n            },\r\n            \"Imperial\": {\r\n                \"Value\": 86,\r\n                \"Unit\": \"F\",\r\n                \"UnitType\": 18\r\n            }\r\n        },\r\n        \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/current-weather/215854?lang=en-us\",\r\n        \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/current-weather/215854?lang=en-us\"\r\n    }\r\n]\r\n\r\nconst getForcast = (cityId = '215854') => {\r\n    //BEFORE PRODUCTION - OPEN THIS LINES\r\n    // const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    // const FORCAST_URL = 'http://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n    // const query = `${FORCAST_URL}${cityId}?apikey=${WEATHER_API_KEY} `;    \r\n\r\n    // return Axios.get(query)\r\n    //     .then(result => {\r\n    //         console.log(`getForcast: cityId: ${cityId}, result: ${result.data}` )\r\n    //         return result.data\r\n    //     })\r\n    //     .catch(error => {\r\n    //         console.log('getForcast: Error : ',error)\r\n    //     })\r\n\r\n    //BEFORE PRODUCTION - DELETE THIS LINE\r\n    return Promise.resolve(fake5DaysForcast)\r\n}\r\nconst getWeather = (cityId = '215854'/*,isFavorite*/) => {\r\n    //BEFORE PRODUCTION - OPEN THIS LINES\r\n    // const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    // const WEATHER_URL = 'http://dataservice.accuweather.com/currentconditions/v1/';\r\n    // const query = `${WEATHER_URL}${cityId}?apikey=${WEATHER_API_KEY} `;\r\n\r\n    // return Axios.get(query)\r\n    //     .then(result => {\r\n    //         // console.log(result.data)\r\n    //         let weather = {\r\n    //             isDayTime: result.data[0].IsDayTime,\r\n    //             weatherIcon: result.data[0].WeatherIcon,\r\n    //             weatherDescription: result.data[0].WeatherText,\r\n    //             temperatureImperialVal: result.data[0].Temperature.Imperial.Value,\r\n    //             temperatureImperialUnit: result.data[0].Temperature.Imperial.Unit,\r\n    //             temperatureMetricVal: result.data[0].Temperature.Metric.Value,\r\n    //             temperatureMetricUnit: result.data[0].Temperature.Metric.Unit,\r\n    //         }\r\n    //         console.log(`getWeather: cityId: ${cityId}, result: ${weather}` )\r\n    //         return weather\r\n    //     })\r\n    //     .catch(error => {\r\n    //         console.log('getWeather Error: ', error)\r\n    //     })\r\n\r\n    //BEFORE PRODUCTION - DELETE THIS LINE\r\n\r\n    let weather = {\r\n        isDayTime: fakeCurrentForcastFalse[0].IsDayTime,\r\n        weatherIcon: fakeCurrentForcastFalse[0].WeatherIcon,\r\n        weatherDescription: fakeCurrentForcastFalse[0].WeatherText,\r\n        temperatureImperialVal: fakeCurrentForcastFalse[0].Temperature.Imperial.Value,\r\n        temperatureImperialUnit: fakeCurrentForcastFalse[0].Temperature.Imperial.Unit,\r\n        temperatureMetricVal: fakeCurrentForcastFalse[0].Temperature.Metric.Value,\r\n        temperatureMetricUnit: fakeCurrentForcastFalse[0].Temperature.Metric.Unit,\r\n    }\r\n\r\n    return Promise.resolve(weather)\r\n}\r\n\r\n\r\nexport default {\r\n    getForcast,\r\n    getWeather\r\n}","import WeatherService from '../../services/WeatherService'\r\n\r\nexport const getForcast = (cityId) => {\r\n    // console.log(`getForcast cityId: ${cityId}`)\r\n    return (dispatch, getState) => {\r\n        WeatherService.getForcast(cityId)\r\n            .then(forcast => {\r\n                dispatch({ type: 'SET_FORCAST', forcast })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'SET_FORCAST_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getWeather = (cityId, isCurrent) => {\r\n    // console.log(`getWeather cityId: ${cityId}, isFavorite ${isFavorite}, isCurrent ${isCurrent}`)\r\n    return (dispatch, getState) => {\r\n        WeatherService.getWeather(cityId)\r\n            .then(weather => {\r\n                //console.log('WEATHER: ',result)\r\n                weather.cityId = cityId;\r\n                // weather.isFavorite = isFavorite;\r\n                weather.isCurrent = isCurrent;\r\n                dispatch({ type: 'SET_WEATHER', weather })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'SET_WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Filter from './Filter'\r\n// import WeatherService from '../services/WeatherService'\r\nimport { connect } from 'react-redux'\r\nimport SingleDaySummary from './SingleDaySummary'\r\nimport { getForcast, getWeather } from '../store/actions/weatherActions'\r\nimport { getCityInfo, toggleFavoriteStatus, loadFavoritesFromStorage } from '../store/actions/locationActions'\r\n// import toggleButton from './toggleButton'\r\nimport Toggle from 'react-toggle'\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        console.log('HOME:componentDidMount()');\r\n        if (!this.props.location.isFavoritesLoaded) { \r\n            this.props.loadFavoritesFromStorage()};\r\n\r\n        //if arrived to this page from selection in favorite Page\r\n        let selectedId = this.props.match.params.cityId;\r\n        console.log('check if routing from selecting a favorite: selectedID is:', selectedId);\r\n        if (selectedId) {\r\n            let cityInfo = this.props.citiesInfo.find(city => city.cityId === selectedId)\r\n            console.log('cityInfo', cityInfo)\r\n            console.log('HOME TO CALL getCityInfo')\r\n            if (cityInfo) this.props.getCityInfo(cityInfo.cityName, true, true);\r\n        }\r\n\r\n        //find current city and if non, load Tel Aviv (defaultCityName)\r\n        let currentCity = this.props.citiesInfo.filter(city => city.isCurrent)\r\n        if (currentCity.length === 0) {\r\n            console.log('CALLING DEFAULT CITY')\r\n            this.props.getCityInfo(this.props.defaultCityName, false, true)\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(`componentDidUpdate()`);\r\n        //check if the previouse cityInfo isCurrent\r\n        let cityInfoPrev = prevProps.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n        console.log('cityInfoPrev', cityInfoPrev)\r\n\r\n        //check if the current cityInfo isCurrent\r\n        let cityInfoCurrent = this.props.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n        console.log('cityInfoCurrent', cityInfoCurrent)\r\n\r\n        //if before no cityInfo and now there is: send request to weather and forcast\r\n        if (!cityInfoPrev.length && cityInfoCurrent.length) {\r\n            console.log('componentUpdate: before no cityInfo. Now new cityInfo: sending weather & forcast requests')\r\n            this.props.getForcast(cityInfoCurrent[0].cityId);\r\n            this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n\r\n            //if prev cityId not the same as current cityId: send request to weather and forcast\r\n        } else if (cityInfoPrev.length && cityInfoCurrent.length) {\r\n            if (cityInfoPrev[0].cityId !== cityInfoCurrent[0].cityId) {\r\n                this.props.getForcast(cityInfoCurrent[0].cityId);\r\n                this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n            }\r\n        }\r\n\r\n    }\r\n    handleToggleFavorite = () => {\r\n        let city = this._getCurrentCity(this.props.citiesInfo);\r\n        this.props.toggleFavoriteStatus(city.cityId)\r\n        console.log(`handleToggleFavorite()`, city);\r\n    }\r\n    _getCurrentCity(cities) {\r\n        console.log(`_getCurrentCity() `);\r\n        let currentCity = cities.filter(city => city.isCurrent)\r\n        if (currentCity.length) return currentCity[0];\r\n        else return null;\r\n    }\r\n    isCurrentFavorite() {\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        console.log(`isCurrentFavorite() => currentCity : `, currentCity);\r\n        if (!currentCity) return false;\r\n        else {\r\n            if (currentCity.isFavorite) {\r\n                console.log('RETURN TRUE!!!!');\r\n                return true;\r\n            }\r\n            else return false;\r\n        }\r\n    }\r\n    render() {\r\n        console.log(`render() `);\r\n\r\n\r\n\r\n\r\n        //extracting WEATHER from props\r\n        let currentWeather = this.props.currentWeather.filter(weather => weather.isCurrent)\r\n        let weatherIcon, weatherDescription, temperatureImperialVal, temperatureImperialUnit;\r\n        //let temperatureMetricUnit, temperatureMetricVal, isDayTime\r\n        if (currentWeather.length) {\r\n            weatherDescription = currentWeather[0].weatherDescription;\r\n            temperatureImperialVal = currentWeather[0].temperatureImperialVal;\r\n            temperatureImperialUnit = currentWeather[0].temperatureImperialUnit;\r\n            // isDayTime = currentWeather[0].isDayTime;\r\n            // temperatureMetricUnit = currentWeather[0].temperatureMetricUnit;\r\n            // temperatureMetricVal = currentWeather[0].temperatureMetricVal;\r\n            weatherIcon = currentWeather[0].weatherIcon;\r\n            if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n        }\r\n        const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n        //extracting current cityInfo from props\r\n        let cityInfo = this.props.citiesInfo.find(city => {\r\n            if (city === undefined) return false\r\n            return city.isCurrent\r\n        });\r\n        let isFavorite;\r\n        if (cityInfo) isFavorite = cityInfo.isFavorite;\r\n        console.log(`cityInfo ${cityInfo}, isFavorite, ${isFavorite}`)\r\n\r\n        //in case favorite loaded from storage and cityInfo arrived from service,\r\n        //updated is favorite status        \r\n        // if (this.props.favorites && cityInfo) {\r\n        //     this.props.favorites.forEach(favoriteCity => {\r\n        //         if (cityInfo.cityName === favoriteCity) {\r\n        //             //since the current cityInfo is also in the favorites                        \r\n        //             if (!cityInfo.isFavorite) {\r\n        //                 console.log('QQQQQQQQQQQQQQ')\r\n        //                 console.log('')\r\n        //                 console.log('current cityInfo arrived. city is in the favorites.sending toggleFavoriteStatus', cityInfo)\r\n        //                 this.props.toggleFavoriteStatus(cityInfo.cityId);\r\n        //             }\r\n        //         }\r\n        //     })\r\n        // }\r\n\r\n\r\n        let countryName, cityName;\r\n        if (cityInfo) {\r\n            countryName = cityInfo.countryName;\r\n            cityName = cityInfo.cityName;\r\n        }\r\n\r\n        //extracting forcast from props\r\n        const { forcast } = this.props;\r\n        const { forcastDescription } = this.props;\r\n\r\n        //extracting ERRORS from props\r\n        const { forcastError } = this.props;\r\n        const { currentWeatherError } = this.props;\r\n        const errors = [forcastError, currentWeatherError].map((error, index) => <div key={index} className=\"red-text\">{error}</div>)\r\n\r\n        //handling toogle button text\r\n        // console.log('cityInfo.isFavorite', cityInfo)\r\n        // let toggleText;\r\n        // if (cityInfo.isFavorite) toggleText = 'Remove from Favorites'\r\n        // else toggleText = 'Add to Favorites';\r\n        // console.log('toggleText', toggleText)\r\n\r\n        //Creating forcast\r\n        const dayList = forcast ? (\r\n            forcast.map((day, index) => {\r\n                return (\r\n                    <SingleDaySummary day={day} key={index} />\r\n                )\r\n            })\r\n        ) : (<h4>There is currently no forcast show</h4>)\r\n\r\n\r\n        const toggleAddFavorite = (this.isCurrentFavorite()) ? 'Remove from Favorites' : \"Add to Favorites\";\r\n        const colorIsFavorite = (this.isCurrentFavorite()) ? {color: 'red'} : {color: 'grey'};\r\n        return (\r\n            <div className=\"container\" >\r\n                <Filter />\r\n\r\n                <div className=\"flex-space-between\">\r\n                    <div className=\"flex  \">\r\n                        <img className=\"large-image\" src={CURRENT_WEATHER_URL}\r\n                            title={weatherDescription} alt={weatherDescription} />\r\n                        <div className=\"flex-col\">\r\n                            <div>{cityName}, {countryName}</div>\r\n                            <div>{temperatureImperialVal}{temperatureImperialUnit}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex centered\">\r\n                        <i className=\"small material-icons\" style={colorIsFavorite}>favorite</i>\r\n                        <button className=\"btn toogle-fav blue darken-2\" onClick={this.handleToggleFavorite}>{toggleAddFavorite}</button>\r\n                    </div>\r\n                    {/* <label>\r\n                        <Toggle\r\n                            defaultChecked={this.isCurrentFavorite()}\r\n                            onChange={this.handleToggleFavorite} />\r\n                        <span>Add to favorites</span>\r\n                    </label> */}\r\n\r\n                </div>\r\n                <div className=\"center main-description\">{weatherDescription}</div>\r\n\r\n                {/* <ul className=\"flex-space-between day-list flex\"> */}\r\n                <ul className=\"member-list\">\r\n                    {dayList}\r\n                </ul>\r\n                <p className=\"center blue-text darken-2 secondary-description\">{forcastDescription}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        defaultCityName: state.location.defaultCityName,\r\n        isFavoritesLoaded: state.location.isFavoritesLoaded,\r\n        favorites: state.location.favorites,\r\n\r\n        forcast: state.weather.forcast,\r\n        forcastDescription: state.weather.forcastDescription,\r\n\r\n        currentWeather: state.weather.currentWeather,\r\n\r\n        forcastError: state.weather.forcastError,\r\n        currentWeatherError: state.weather.currentWeatherError\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n        getForcast: (cityId) => { dispatch(getForcast(cityId)) },\r\n        getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n        toggleFavoriteStatus: (cityId) => { dispatch(toggleFavoriteStatus(cityId)) },\r\n        // isCurrentFavorite: () => { dispatch(isCurrentFavorite()) },\r\n\r\n        // setCurrentCity: (cityId) => { dispatch(setCurrentCity(cityId)) },\r\n        loadFavoritesFromStorage: () => { dispatch(loadFavoritesFromStorage()) }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SingleFavoriteItem = (props) => {\r\n    console.log('SingleFavoriteItem: ', props)\r\n\r\n    let cityName = props.composedInfo.cityInfo.cityName;\r\n    let cityId = props.composedInfo.cityInfo.cityId;\r\n    let countryName = props.composedInfo.cityInfo.countryName;\r\n\r\n    let temperatureImperialUnit = props.composedInfo.currentWeather.temperatureImperialUnit;\r\n    let temperatureImperialVal = props.composedInfo.currentWeather.temperatureImperialVal;\r\n    let weatherDescription = props.composedInfo.currentWeather.weatherDescription;\r\n    let weatherIcon = props.composedInfo.currentWeather.weatherIcon;\r\n    if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n\r\n    const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n    return (\r\n        <Link to={'/' + cityId}>\r\n            <div className=\"card\" >\r\n                <div className=\"card-content\">\r\n                    <div>{cityName}, {countryName}</div>\r\n                    <div>{temperatureImperialVal}, {temperatureImperialUnit}</div>\r\n                    <img src={CURRENT_WEATHER_URL} title={weatherDescription} alt={weatherDescription} />\r\n                    <div>{weatherDescription}</div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default SingleFavoriteItem","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SingleFavoriteItem from './SingleFavoriteItem'\r\n\r\nclass FavoriteList extends Component {\r\n    componentDidMount() {\r\n        // console.log('componentDidMount',this.props)\r\n        \r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log('componentDidUpdate', this.props)\r\n    }\r\n\r\n    render() {\r\n        const favoritesInfo = [];\r\n        if (this.props.citiesInfo.length) {\r\n            this.props.citiesInfo.forEach((cityInfo) => {\r\n                if (this.props.currentWeather.length) {\r\n                    this.props.currentWeather.forEach(currentWeather => {\r\n                        // console.log(`currWeather.cityId: ${currWeather.cityId}`)\r\n                        // console.log(`favoritesCityInfo.cityId: ${currWeather.cityId}`)\r\n                        if (currentWeather.cityId === cityInfo.cityId && cityInfo.isFavorite) {\r\n                            // console.log('IM INSIDE TOGETHER')\r\n                            favoritesInfo.push({ cityInfo, currentWeather })\r\n                        }\r\n                    })\r\n                } else {\r\n                    console.log('IM INSIDE ALONE')\r\n                    favoritesInfo.push({ cityInfo })\r\n                }\r\n            })//END FOREACH\r\n        }\r\n\r\n        console.log('favoritesInfo:', favoritesInfo)\r\n        const favoritesInfoToRender = favoritesInfo.length ? (\r\n            favoritesInfo.map((composedInfo, index) => {\r\n                return (\r\n                    <SingleFavoriteItem composedInfo={composedInfo} key={index} />\r\n                )\r\n            })\r\n        ) : (<h1>No Favorites Selected </h1>)\r\n       \r\n        return (\r\n            <ul className=\"member-list\">\r\n            \r\n                    {favoritesInfoToRender}\r\n             \r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        currentWeather: state.weather.currentWeather\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteList)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport FavoriteList from './FavoriteList'\r\nimport { getCityInfo, toggleFavoriteStatus } from '../store/actions/locationActions'\r\nimport { getWeather } from '../store/actions/weatherActions'\r\n\r\n// const Favorites = (props) =>{\r\nclass Favorites extends Component {\r\n  componentDidMount() {\r\n    console.log('componentDidMount', this.props)\r\n    //sending request for cityInfo \r\n    if(this.props.favorites) this.props.favorites.forEach((favoriteCityName) => {\r\n      //check if iterated city isCurrent\r\n      console.log('favoriteCityName', favoriteCityName)\r\n      let cityInfo = this.props.citiesInfo.find(cityInfo => cityInfo.cityName === favoriteCityName);\r\n      if (!cityInfo) {\r\n        console.log('send request for cityInfo. city is in favorite list but not in the cityInfo array')\r\n        this.props.getCityInfo(favoriteCityName, true, false)\r\n      }\r\n      else {//city in cityInfo Array, not marked as favorite, but is in the favorites\r\n        toggleFavoriteStatus(favoriteCityName)\r\n        console.log('ABOUT TO SET TOGGLE')\r\n        this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n      }\r\n    })\r\n  }\r\n  //sending request for forcast if cityInfo is a favorite\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // console.log('componentDidUpdate', this.props)\r\n\r\n    this.props.citiesInfo.forEach((cityInfo) => {\r\n      //if cityInfo exists and it is favorite\r\n      let city = this.props.favorites.find(cityName => cityInfo.CityName === cityName)\r\n      if (city) {\r\n        //if city dont have weather, request one\r\n        let selectedWeather = this.props.currentWeather.find(weather => weather.cityId === cityInfo.cityId)\r\n        if (!selectedWeather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    //console.log('FAVORITES: ',this.props)\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h4 className=\"center\">Favorites</h4>\r\n        <FavoriteList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    citiesInfo: state.location.citiesInfo,\r\n    favorites: state.location.favorites,\r\n    currentWeather: state.location.currentWeather\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n    getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n    toggleFavoriteStatus: (cityName) => { dispatch(toggleFavoriteStatus(cityName)) },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites)","import React from 'react';\nimport Navbar from './cmps/Navbar'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './cmps/Home';\nimport Favorites from './cmps/Favorites';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/favorites\" component={Favorites} />\n          <Route path=\"/:cityId\" component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { saveToStorage, loadFromStorage } from '../../services/utilService'\r\n\r\nconst initState = {\r\n    favorites: [],//City names\r\n    isFavoritesLoaded: false,\r\n    citiesInfo: [],\r\n    defaultCityName: 'Tel Aviv',\r\n    errorReceived: ''\r\n}\r\n\r\nconst locationReducer = (state = initState, action) => {\r\n    // console.log('entering location reducer: ',action)\r\n    switch (action.type) {\r\n        case 'LOAD_FAVORITES_FROM_STORAGE':\r\n            {\r\n                console.log('LOAD_FAVORITES_FROM_STORAGE ', action.favorites)\r\n                return {\r\n                    ...state,\r\n                    isFavoritesLoaded: true,\r\n                    favorites: action.favorites\r\n                }\r\n            }\r\n        case 'SET_CITY_INFO':\r\n            {\r\n                console.log(`SET_CITY_INFO ${action}`)\r\n                //check if cityInfo exists\r\n                let cities = [...state.citiesInfo];\r\n\r\n                //if arrived city isCurrent, set all cities to NOT current\r\n                if (action.cityInfo.isCurrent) cities.forEach(city => city.isCurrent = false)\r\n\r\n                //check if the arrived city is in the array\r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityInfo.cityId);\r\n                if (!selectedCity) {\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities, action.cityInfo]\r\n                    }\r\n                } else {\r\n                    selectedCity.isCurrent = action.cityInfo.isCurrent;\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities]\r\n                    }\r\n                }\r\n            }\r\n        case 'TOGGLE_FAVORITE_STATUS':\r\n            {\r\n                console.log(`TOGGLE_FAVORITE_STATUS: ${action}`)\r\n                let cities = [...state.citiesInfo];\r\n                //change the FAVORITE attribute \r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityId);\r\n                selectedCity.isFavorite = !selectedCity.isFavorite;\r\n\r\n                //check if cityName exists in the favorites\r\n                let favoriteNames = [...state.favorites];\r\n                let cityIndex = favoriteNames.indexOf(selectedCity.cityName);\r\n\r\n                //if it has been selected as favorite\r\n                if (selectedCity.isFavorite) {\r\n                    //insert to favorites if not exists\r\n                    if (cityIndex < 0) favoriteNames = [...favoriteNames, selectedCity.cityName];\r\n                    console.log(favoriteNames, \" - favoriteNames: IF\")\r\n                    //  if (cityIndex < 0) favoriteNames.push(selectedCity.cityName);\r\n                } else {\r\n                    //if it has been selected as NOT favorite\r\n                    if (cityIndex >= 0) favoriteNames.splice(cityIndex, 1);\r\n                    console.log(favoriteNames, \" - favoriteNames: ELSE\")\r\n                }\r\n                saveToStorage('favorites', favoriteNames)\r\n                return {\r\n                    ...state,\r\n                    favorites: favoriteNames,\r\n                    citiesInfo: [...cities]\r\n                }\r\n            }\r\n        // case 'IS_CURRENT_FAVORITE':\r\n        //     console.log(`locationReducer > SET_CURRENT_CITY > action: ${action}`)\r\n\r\n        //     return {\r\n        //         ...state,\r\n        //         errorReceived: ''\r\n        //     }\r\n        case 'SET_LOCATION_ERROR':\r\n            console.log(`locationReducer > SET_LOCATION_ERROR > action: ${action}`)\r\n            return {\r\n                ...state,\r\n                errorReceived: ''\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default locationReducer","\r\nconst initState = {\r\n    // forcastFor5Days: [],\r\n    // forcastFor5DaysHeading: {},\r\n    forcast: [],\r\n    forcastDescription: '',\r\n\r\n    currentWeather: [],\r\n\r\n    //Errors\r\n    weatherError: '',\r\n    forcastError: '',\r\n}\r\nconst weatherReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_FORCAST':\r\n                console.log(`weatherReducer > SET_FORCAST > action: ${action}`)\r\n            // console.log('action type:',action.type)\r\n            // console.log('action forcast:',action.forcast)\r\n\r\n            return {\r\n                ...state,\r\n                forcastError: '',\r\n                forcast: action.forcast.DailyForecasts,\r\n                forcastDescription: action.forcast.Headline.Text\r\n            }\r\n        case 'SET_FORCAST_ERROR':\r\n                console.log(`weatherReducer > SET_FORCAST_ERROR > action: ${action}`)\r\n            return {\r\n                ...state,\r\n                forcastError: action.payload\r\n            }\r\n        case 'SET_WEATHER':\r\n            {\r\n                console.log(`weatherReducer > SET_WEATHER > action: ${action}`)\r\n                //if weather exists, replace it              \r\n                let weatherList = [...state.currentWeather];\r\n                let isExists = false;\r\n                let updatedWeather = weatherList.map(weather => {\r\n                    if (weather.cityId === action.weather.cityId) {\r\n                        isExists = true;\r\n                        return action.weather;\r\n                    }\r\n                    else return weather;\r\n                })\r\n                // console.log('updatedWeather: ',updatedWeather)\r\n                if (isExists) {\r\n                    return {\r\n                        ...state,\r\n                        weatherError: '',\r\n                        currentWeather: [...updatedWeather]\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        weatherError: '',\r\n                        currentWeather: [...state.currentWeather, action.weather]\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        case 'SET_WEATHER_ERROR':\r\n                console.log(`weatherReducer > SET_WEATHER_ERROR > action: ${action}`)\r\n            return {\r\n                ...state,\r\n                currentForcastError: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer","import locationReducer from './locationReducer'\r\nimport weatherReducer from './weatherReducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weatherReducer,\r\n    location: locationReducer\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore,applyMiddleware,compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from  './store/reducers/rootReducer'\n//enable async operation and call external services/db from within the action creator.\n//instead of returning an action, we will return a function, thus hulting the dispach operation\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// const store = createStore(rootReducer,applyMiddleware(thunk),composeWithDevTools());\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        composeWithDevTools()\n    ));\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}