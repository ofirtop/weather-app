{"version":3,"sources":["cmps/Navbar.js","services/LocationService.js","services/utilService.js","store/actions/locationActions.js","cmps/Filter.js","cmps/SingleDaySummary.js","services/WeatherService.js","store/actions/weatherActions.js","cmps/Home.js","cmps/SingleFavoriteItem.js","cmps/FavoriteList.js","cmps/Favorites.js","App.js","serviceWorker.js","store/reducers/locationReducer.js","store/reducers/weatherReducer.js","store/reducers/rootReducer.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","fakeCityInfoRes1","Version","Key","Type","Rank","LocalizedName","Country","ID","AdministrativeArea","fakeCityInfoRes2","fakeCityInfoRes3","fakeCityInfoRes4","fakeCityInfoRes5","fakeCityInfoRes6","LocationService","cityName","cityInfo1","countryName","cityId","cityInfo2","cityInfo3","cityInfo4","cityInfo5","cityInfo6","Promise","resolve","utilService","saveToStorage","loadFromStorage","formatTime","time","hour","Date","getHours","minute","getMinutes","seconds","getSeconds","day","getDate","month","getMonth","year","getFullYear","_pad","key","value","str","JSON","stringify","localStorage","setItem","getItem","parse","n","getCityInfo","isFavorite","isCurrent","dispatch","getState","then","cityInfo","type","catch","error","toggleFavoriteStatus","Filter","state","handleChange","e","_this","setState","target","handleSubmit","preventDefault","props","onSubmit","this","placeholder","onChange","Component","connect","SingleDaySummary","dayIcon","Day","Icon","concat","nightIcon","Night","DAY_URL","NIGHT_URL","getDay","src","title","IconPhrase","alt","Temperature","Maximum","Value","Unit","Minimum","fake5DaysForcast","Headline","EffectiveDate","EffectiveEpochDate","Severity","Text","Category","EndDate","EndEpochDate","MobileLink","Link","DailyForecasts","EpochDate","UnitType","HasPrecipitation","Sources","fakeCurrentForcastFalse","LocalObservationDateTime","EpochTime","WeatherText","WeatherIcon","PrecipitationType","IsDayTime","Metric","Imperial","WeatherService","arguments","length","undefined","weather","isDayTime","weatherIcon","weatherDescription","temperatureImperialVal","temperatureImperialUnit","temperatureMetricVal","temperatureMetricUnit","getWeather","Home","handleToggleFavorite","city","_getCurrentCity","citiesInfo","_this2","location","isFavoritesLoaded","loadFavoritesFromStorage","selectedId","match","params","find","favoriteList","favoriteCity","defaultCityName","prevProps","prevState","console","log","cityInfoPrev","filter","cityInfoCurrent","getForcast","locationError","toast","weatherError","cities","currentCity","currentWeather","CURRENT_WEATHER_URL","forcast","forcastDescription","dayList","map","index","cmps_SingleDaySummary","toggleAddFavorite","isCurrentFavorite","colorIsFavorite","color","cmps_Filter","style","onClick","favorites","SingleFavoriteItem","composedInfo","FavoriteList","favoritesInfo","forEach","push","favoritesInfoToRender","cmps_SingleFavoriteItem","Favorites","favoriteCityName","cmps_FavoriteList","App","react_toastify","cmps_Navbar","react_router","exact","path","component","Boolean","window","hostname","initState","locationReducer","action","Object","objectSpread","toConsumableArray","selectedCity","favoriteNames","cityIndex","indexOf","splice","weatherReducer","weatherList","isExists","updatedWeather","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","composeWithDevTools","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1ca0d71.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nconst Navbar = () =>{\r\n    return (\r\n        <nav className=\"blue darken-2\">\r\n            <div>\r\n                <Link to=\"/\" className=\"left brand\">iWeather</Link>\r\n                <ul className=\"right nav-links\">\r\n                   <li><NavLink to=\"/\">Home</NavLink></li> \r\n                   <li><NavLink to=\"/favorites\">Favorites</NavLink></li> \r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","// import Axios from \"axios\";\r\nvar fakeCityInfoRes1 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215854\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Tel Aviv\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes2 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215855\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Madrid\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes3 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215856\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Barcelona\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes4 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215857\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Canbara\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes5 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215858\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"San Francisoco\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\nvar fakeCityInfoRes6 = [\r\n  {\r\n    \"Version\": 1,\r\n    \"Key\": \"215859\",\r\n    \"Type\": \"City\",\r\n    \"Rank\": 31,\r\n    \"LocalizedName\": \"Jerusalem\",\r\n    \"Country\": {\r\n      \"ID\": \"IL\",\r\n      \"LocalizedName\": \"Israel\"\r\n    },\r\n    \"AdministrativeArea\": {\r\n      \"ID\": \"TA\",\r\n      \"LocalizedName\": \"Tel Aviv\"\r\n    }\r\n  }\r\n]\r\n\r\nconst getCityInfoByName = (cityName) => {\r\n  //BEFORE PRODUCTION - OPEN THIS LINES\r\n  // const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII'\r\n  // const LOCATION_AUTO_COMPLETE_BASE = 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete'\r\n  // const query = `${LOCATION_AUTO_COMPLETE_BASE}?apikey=${WEATHER_API_KEY}&q=${cityName} `\r\n\r\n  // return Axios.get(query)\r\n  // .then(result =>{\r\n  //     let cityInfo = {\r\n  //         // countryName : result.data[0].Country.LocalizedName,\r\n  //         cityId : result.data[0].Key,\r\n  //         cityName : result.data[0].LocalizedName\r\n  //     };\r\n\r\n  //     return cityInfo\r\n  // })\r\n  // .catch(error =>{\r\n  // })\r\n\r\n  //BEFORE PRODUCTION - DELETE THIS LINE\r\n  let cityInfo1 = {\r\n    countryName: fakeCityInfoRes1[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes1[0].Key,\r\n    cityName: fakeCityInfoRes1[0].LocalizedName\r\n  };\r\n  let cityInfo2 = {\r\n    countryName: fakeCityInfoRes2[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes2[0].Key,\r\n    cityName: fakeCityInfoRes2[0].LocalizedName\r\n  };\r\n  let cityInfo3 = {\r\n    countryName: fakeCityInfoRes3[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes3[0].Key,\r\n    cityName: fakeCityInfoRes3[0].LocalizedName\r\n  };\r\n  let cityInfo4 = {\r\n    countryName: fakeCityInfoRes4[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes4[0].Key,\r\n    cityName: fakeCityInfoRes4[0].LocalizedName\r\n  };\r\n  let cityInfo5 = {\r\n    countryName: fakeCityInfoRes5[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes5[0].Key,\r\n    cityName: fakeCityInfoRes5[0].LocalizedName\r\n  };\r\n  let cityInfo6 = {\r\n    countryName: fakeCityInfoRes6[0].Country.LocalizedName,\r\n    cityId: fakeCityInfoRes6[0].Key,\r\n    cityName: fakeCityInfoRes6[0].LocalizedName\r\n  };\r\n\r\n  switch (cityName) {\r\n    case '1':\r\n    case 'Tel Aviv':\r\n    case '215854':\r\n      return Promise.resolve(cityInfo1)//215854 Tel Aviv\r\n    case '2':\r\n    case 'Madrid':\r\n    case '215855':\r\n      return Promise.resolve(cityInfo2)//215855 Madrid\r\n    case '3':\r\n    case 'Barcelona':\r\n    case '215856':\r\n      return Promise.resolve(cityInfo3)//215856 Barcelona\r\n    case '4':\r\n    case 'Canbara':\r\n    case '215857':\r\n      return Promise.resolve(cityInfo4)//215857 Canbara\r\n    case '5':\r\n    case 'San Francisoco':\r\n    case '215858':\r\n      return Promise.resolve(cityInfo5)//215858 San Francisoco\r\n    case '6':\r\n    case 'Jerusalem':\r\n    case '215859':\r\n      return Promise.resolve(cityInfo6)//215859 Jerusalem\r\n    default:\r\n      return Promise.resolve(cityInfo6)\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default {\r\n  getCityInfoByName\r\n}","\r\nexport default {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    formatTime\r\n}\r\n\r\nexport function saveToStorage(key, value) {\r\n    var str = JSON.stringify(value);\r\n    localStorage.setItem(key, str);\r\n}\r\n\r\nexport function loadFromStorage(key) {\r\n    var str = localStorage.getItem(key);\r\n    if (!str) return undefined;\r\n    return JSON.parse(str);\r\n}\r\n\r\nfunction formatTime(time){\r\n    var hour = new Date(time).getHours();\r\n    //hour += 2; //offset\r\n    var minute = new Date(time).getMinutes();\r\n    var seconds = new Date(time).getSeconds();\r\n    var day = new Date(time).getDate();\r\n    var month = new Date(time).getMonth() + 1;\r\n    var year = new Date(time).getFullYear();\r\n    return day + '/' + month + '/' + year + '  ' + _pad(hour) + ':' + _pad(minute) + ':' + _pad(seconds);\r\n}\r\nfunction _pad(n) {\r\n    return n < 10 ? '0' + n : n;\r\n}","import LocationService from '../../services/LocationService'\r\nimport { loadFromStorage } from '../../services/utilService'\r\n\r\nexport const getCityInfo = (cityName, isFavorite, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        LocationService.getCityInfoByName(cityName)\r\n            .then(cityInfo => {\r\n                cityInfo.isFavorite = isFavorite;\r\n                cityInfo.isCurrent = isCurrent;\r\n                dispatch({ type: 'SET_CITY_INFO', cityInfo })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'LOCATION_ERROR', error })\r\n            })\r\n    }\r\n}\r\nexport const toggleFavoriteStatus = (cityId) => {\r\n    return { type: 'TOGGLE_FAVORITE_STATUS', cityId }\r\n}\r\nexport const loadFavoritesFromStorage = () => {\r\n    return (dispatch, getState) => {\r\n        //async code - accessing location service\r\n        let favorites = loadFromStorage('favorites')\r\n        if (!favorites) favorites = [];\r\n        dispatch({ type: 'LOAD_FAVORITES_FROM_STORAGE', favorites })\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCityInfo } from '../store/actions/locationActions'\r\n\r\nclass Filter extends Component {\r\n    state = {\r\n        cityName: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            cityName:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.getCityInfo(this.state.cityName,false,true);\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"container\">\r\n                <input type=\"text\" placeholder=\"Search for weather location\" onChange={this.handleChange} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n//allow component to dispach action to set the store\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName,isFavorite,isCurrent) => dispatch(getCityInfo(cityName,isFavorite,isCurrent))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(Filter)","import React from 'react'\r\n\r\nconst SingleDaySummary = (props) => {\r\n    const { day } = props    \r\n    let dayIcon = day.Day.Icon;\r\n    if(dayIcon<10) dayIcon = `0${dayIcon}`\r\n    \r\n    let nightIcon = day.Night.Icon;\r\n    if(nightIcon<10) nightIcon = `0${nightIcon}`\r\n\r\n    const DAY_URL   = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${dayIcon}-s.png`;\r\n    const NIGHT_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${nightIcon}-s.png`;\r\n    \r\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n    return (\r\n        <div className=\"card week-day\" >\r\n            <div className=\"card-content\">\r\n                <div className=\"card-title\">{weekdays[new Date(day.Date).getDay()]}</div>  \r\n                <img src={DAY_URL} title={props.day.Day.IconPhrase} alt={props.day.Day.IconPhrase}/>                 \r\n                <p>Max {day.Temperature.Maximum.Value}{day.Temperature.Maximum.Unit}</p>\r\n                <hr/>\r\n                <img src={NIGHT_URL} title={props.day.Night.IconPhrase} alt={props.day.Night.IconPhrase}/>                 \r\n                <p>Min {day.Temperature.Minimum.Value}{day.Temperature.Minimum.Unit}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDaySummary","// import Axios from \"axios\";\r\n// import './fiveDaysWeather.json'\r\n\r\nvar fake5DaysForcast = {\r\n    \"Headline\": {\r\n        \"EffectiveDate\": \"2019-08-03T08:00:00+03:00\",\r\n        \"EffectiveEpochDate\": 1564808400,\r\n        \"Severity\": 4,\r\n        \"Text\": \"Pleasant this weekend\",\r\n        \"Category\": \"\",\r\n        \"EndDate\": null,\r\n        \"EndEpochDate\": null,\r\n        \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/extended-weather-forecast/215854?lang=en-us\",\r\n        \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?lang=en-us\"\r\n    },\r\n    \"DailyForecasts\": [\r\n        {\r\n            \"Date\": \"2019-07-31T07:00:00+03:00\",\r\n            \"EpochDate\": 1564545600,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 177,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 192,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 1,\r\n                \"IconPhrase\": \"Sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 34,\r\n                \"IconPhrase\": \"Mostly clear\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=1&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=1&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-01T07:00:00+03:00\",\r\n            \"EpochDate\": 1564632000,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 78,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 88,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 2,\r\n                \"IconPhrase\": \"Mostly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 35,\r\n                \"IconPhrase\": \"Partly cloudy\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=2&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=2&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-02T07:00:00+03:00\",\r\n            \"EpochDate\": 1564718400,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 76,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 89,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 3,\r\n                \"IconPhrase\": \"Partly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 34,\r\n                \"IconPhrase\": \"Mostly clear\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=3&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=3&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-03T07:00:00+03:00\",\r\n            \"EpochDate\": 1564804800,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 79,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 89,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 2,\r\n                \"IconPhrase\": \"Mostly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 35,\r\n                \"IconPhrase\": \"Partly cloudy\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=4&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=4&lang=en-us\"\r\n        },\r\n        {\r\n            \"Date\": \"2019-08-04T07:00:00+03:00\",\r\n            \"EpochDate\": 1564891200,\r\n            \"Temperature\": {\r\n                \"Minimum\": {\r\n                    \"Value\": 77,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                },\r\n                \"Maximum\": {\r\n                    \"Value\": 90,\r\n                    \"Unit\": \"F\",\r\n                    \"UnitType\": 18\r\n                }\r\n            },\r\n            \"Day\": {\r\n                \"Icon\": 2,\r\n                \"IconPhrase\": \"Mostly sunny\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Night\": {\r\n                \"Icon\": 34,\r\n                \"IconPhrase\": \"Mostly clear\",\r\n                \"HasPrecipitation\": false\r\n            },\r\n            \"Sources\": [\r\n                \"AccuWeather\"\r\n            ],\r\n            \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=5&lang=en-us\",\r\n            \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/daily-weather-forecast/215854?day=5&lang=en-us\"\r\n        }\r\n    ]\r\n}\r\n\r\nvar fakeCurrentForcastFalse = [\r\n    {\r\n        \"LocalObservationDateTime\": \"2019-08-02T10:01:00+03:00\",\r\n        \"EpochTime\": 1564729260,\r\n        \"WeatherText\": \"Clouds and sun\",\r\n        \"WeatherIcon\": 4,\r\n        \"HasPrecipitation\": false,\r\n        \"PrecipitationType\": null,\r\n        \"IsDayTime\": true,\r\n        \"Temperature\": {\r\n            \"Metric\": {\r\n                \"Value\": 30.1,\r\n                \"Unit\": \"C\",\r\n                \"UnitType\": 17\r\n            },\r\n            \"Imperial\": {\r\n                \"Value\": 86,\r\n                \"Unit\": \"F\",\r\n                \"UnitType\": 18\r\n            }\r\n        },\r\n        \"MobileLink\": \"http://m.accuweather.com/en/il/tel-aviv/215854/current-weather/215854?lang=en-us\",\r\n        \"Link\": \"http://www.accuweather.com/en/il/tel-aviv/215854/current-weather/215854?lang=en-us\"\r\n    }\r\n]\r\n\r\nconst getForcast = (cityId = '215854') => {\r\n    //BEFORE PRODUCTION - OPEN THIS LINES\r\n    // const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    // const FORCAST_URL = 'http://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n    // const query = `${FORCAST_URL}${cityId}?apikey=${WEATHER_API_KEY} `;    \r\n\r\n    // return Axios.get(query)\r\n    //     .then(result => {\r\n\r\n    //         return result.data\r\n    //     })\r\n    //     .catch(error => {\r\n    //     })\r\n\r\n    //BEFORE PRODUCTION - DELETE THIS LINE\r\n    return Promise.resolve(fake5DaysForcast)\r\n}\r\nconst getWeather = (cityId = '215854'/*,isFavorite*/) => {\r\n    //BEFORE PRODUCTION - OPEN THIS LINES\r\n    // const WEATHER_API_KEY = 'gQ307OUWQ0rbqOqwiGr85Z3JDQBtEEII';\r\n    // const WEATHER_URL = 'http://dataservice.accuweather.com/currentconditions/v1/';\r\n    // const query = `${WEATHER_URL}${cityId}?apikey=${WEATHER_API_KEY} `;\r\n\r\n    // return Axios.get(query)\r\n    //     .then(result => {    \r\n    //         let weather = {\r\n    //             isDayTime: result.data[0].IsDayTime,\r\n    //             weatherIcon: result.data[0].WeatherIcon,\r\n    //             weatherDescription: result.data[0].WeatherText,\r\n    //             temperatureImperialVal: result.data[0].Temperature.Imperial.Value,\r\n    //             temperatureImperialUnit: result.data[0].Temperature.Imperial.Unit,\r\n    //             temperatureMetricVal: result.data[0].Temperature.Metric.Value,\r\n    //             temperatureMetricUnit: result.data[0].Temperature.Metric.Unit,\r\n    //         }\r\n    //         return weather\r\n    //     })\r\n    //     .catch(error => {\r\n    //     })\r\n\r\n    //BEFORE PRODUCTION - DELETE THIS LINE\r\n\r\n    let weather = {\r\n        isDayTime: fakeCurrentForcastFalse[0].IsDayTime,\r\n        weatherIcon: fakeCurrentForcastFalse[0].WeatherIcon,\r\n        weatherDescription: fakeCurrentForcastFalse[0].WeatherText,\r\n        temperatureImperialVal: fakeCurrentForcastFalse[0].Temperature.Imperial.Value,\r\n        temperatureImperialUnit: fakeCurrentForcastFalse[0].Temperature.Imperial.Unit,\r\n        temperatureMetricVal: fakeCurrentForcastFalse[0].Temperature.Metric.Value,\r\n        temperatureMetricUnit: fakeCurrentForcastFalse[0].Temperature.Metric.Unit,\r\n    }\r\n\r\n    return Promise.resolve(weather)\r\n}\r\n\r\n\r\nexport default {\r\n    getForcast,\r\n    getWeather\r\n}","import WeatherService from '../../services/WeatherService'\r\n\r\nexport const getForcast = (cityId) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getForcast(cityId)\r\n            .then(forcast => {\r\n                dispatch({ type: 'SET_FORCAST', forcast })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getWeather = (cityId, isCurrent) => {\r\n    return (dispatch, getState) => {\r\n        WeatherService.getWeather(cityId)\r\n            .then(weather => {\r\n                weather.cityId = cityId;\r\n                weather.isCurrent = isCurrent;\r\n                dispatch({ type: 'SET_WEATHER', weather })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: 'WEATHER_ERROR', error })\r\n            })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Filter from './Filter'\r\nimport { connect } from 'react-redux'\r\nimport SingleDaySummary from './SingleDaySummary'\r\nimport { getForcast, getWeather } from '../store/actions/weatherActions'\r\nimport { getCityInfo, toggleFavoriteStatus, loadFavoritesFromStorage } from '../store/actions/locationActions'\r\nimport utilService from '../services/utilService'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        if (!this.props.location.isFavoritesLoaded) {\r\n            this.props.loadFavoritesFromStorage()\r\n        };\r\n\r\n        //if arrived to this page from selection in favorite Page\r\n        let selectedId = this.props.match.params.cityId;\r\n        if (selectedId) {\r\n            let cityInfo = this.props.citiesInfo.find(city => city.cityId === selectedId)\r\n            if (cityInfo) this.props.getCityInfo(cityInfo.cityName, true, true);\r\n        }\r\n\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) {\r\n            let favoriteList = utilService.loadFromStorage('favorites');\r\n            if (favoriteList) {\r\n                let isFavorite = favoriteList.find(favoriteCity => favoriteCity === this.props.defaultCityName)\r\n                this.props.getCityInfo(this.props.defaultCityName, isFavorite ? true : false, true)\r\n            } else {\r\n\r\n                this.props.getCityInfo(this.props.defaultCityName, false, true)\r\n            }\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log('inside componentDidUpdate')\r\n        //check if the previouse cityInfo isCurrent\r\n        let cityInfoPrev = prevProps.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //check if the current cityInfo isCurrent\r\n        let cityInfoCurrent = this.props.citiesInfo.filter(cityInfo => {\r\n            if (cityInfo === undefined) return false\r\n            return cityInfo.isCurrent === true;\r\n        })\r\n\r\n        //if before no cityInfo and now there is: send request to weather and forcast\r\n        if (!cityInfoPrev.length && cityInfoCurrent.length) {\r\n            this.props.getForcast(cityInfoCurrent[0].cityId);\r\n            this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n\r\n            //if prev cityId not the same as current cityId: send request to weather and forcast\r\n        } else if (cityInfoPrev.length && cityInfoCurrent.length) {\r\n            if (cityInfoPrev[0].cityId !== cityInfoCurrent[0].cityId) {\r\n                this.props.getForcast(cityInfoCurrent[0].cityId);\r\n                this.props.getWeather(cityInfoCurrent[0].cityId, true);\r\n            }\r\n        }\r\n\r\n        //handle location errors\r\n        if ((prevProps.locationError !== this.props.locationError) &&\r\n        this.props.locationError !== '') {\r\n            toast(this.props.locationError)\r\n        }\r\n        //handle weather errors\r\n        if ((prevProps.weatherError !== this.props.weatherError) &&\r\n            this.props.weatherError !== '') {\r\n                toast(this.props.weatherError)\r\n        }\r\n    }\r\n    handleToggleFavorite = () => {\r\n        let city = this._getCurrentCity(this.props.citiesInfo);\r\n        this.props.toggleFavoriteStatus(city.cityId)\r\n    }\r\n    _getCurrentCity(cities) {\r\n        let currentCity = cities.filter(city => city.isCurrent)\r\n        if (currentCity.length) return currentCity[0];\r\n        else return null;\r\n    }\r\n    isCurrentFavorite() {\r\n        let currentCity = this.props.citiesInfo.find(city => city.isCurrent)\r\n        if (!currentCity) return false;\r\n        else {\r\n            if (currentCity.isFavorite) {\r\n                return true;\r\n            }\r\n            else return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //call notify\r\n\r\n        // console.log('render error: ',this.props.locationError)\r\n        // if(this.props.locationError) this.notify(this.props.locationError)\r\n\r\n        //extracting WEATHER from props\r\n        let currentWeather = this.props.currentWeather.filter(weather => weather.isCurrent)\r\n        let weatherIcon, weatherDescription, temperatureImperialVal, temperatureImperialUnit;\r\n        //let temperatureMetricUnit, temperatureMetricVal, isDayTime\r\n        if (currentWeather.length) {\r\n            weatherDescription = currentWeather[0].weatherDescription;\r\n            temperatureImperialVal = currentWeather[0].temperatureImperialVal;\r\n            temperatureImperialUnit = currentWeather[0].temperatureImperialUnit;\r\n\r\n            weatherIcon = currentWeather[0].weatherIcon;\r\n            if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n        }\r\n        const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n        //extracting current cityInfo from props\r\n        let cityInfo = this.props.citiesInfo.find(city => {\r\n            if (city === undefined) return false\r\n            return city.isCurrent\r\n        });\r\n\r\n        let countryName, cityName;\r\n        if (cityInfo) {\r\n            countryName = cityInfo.countryName;\r\n            cityName = cityInfo.cityName;\r\n        }\r\n\r\n        //extracting forcast from props\r\n        const { forcast } = this.props;\r\n        const { forcastDescription } = this.props;\r\n\r\n        //Creating forcast\r\n        const dayList = forcast ? (\r\n            forcast.map((day, index) => {\r\n                return (\r\n                    <SingleDaySummary day={day} key={index} />\r\n                )\r\n            })\r\n        ) : (<h4>There is currently no forcast show</h4>)\r\n\r\n\r\n        const toggleAddFavorite = (this.isCurrentFavorite()) ? 'Remove from Favorites' : \"Add to Favorites\";\r\n        const colorIsFavorite = (this.isCurrentFavorite()) ? { color: 'red' } : { color: 'grey' };\r\n\r\n        return (\r\n            <div className=\"container\" >\r\n                <Filter />\r\n                <div className=\"flex-space-between\">\r\n                    <div className=\"flex  \">\r\n                        <img className=\"large-image\" src={CURRENT_WEATHER_URL}\r\n                            title={weatherDescription} alt={weatherDescription} />\r\n                        <div className=\"flex-col\">\r\n                            <div>{cityName}, {countryName}</div>\r\n                            <div>{temperatureImperialVal}{temperatureImperialUnit}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex centered\">\r\n                        <i className=\"small material-icons\" style={colorIsFavorite}>favorite</i>\r\n                        <button className=\"btn toogle-fav blue darken-2\" onClick={this.handleToggleFavorite}>{toggleAddFavorite}</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"center main-description\">{weatherDescription}</div>\r\n                <ul className=\"forcast-list\">\r\n                    {dayList}\r\n                </ul>\r\n                <p className=\"center blue-text darken-2 secondary-description\">{forcastDescription}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        defaultCityName: state.location.defaultCityName,\r\n        isFavoritesLoaded: state.location.isFavoritesLoaded,\r\n        favorites: state.location.favorites,\r\n        forcast: state.weather.forcast,\r\n        forcastDescription: state.weather.forcastDescription,\r\n        currentWeather: state.weather.currentWeather,\r\n        weatherError: state.weather.error,\r\n        locationError: state.location.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n        getForcast: (cityId) => { dispatch(getForcast(cityId)) },\r\n        getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n        toggleFavoriteStatus: (cityId) => { dispatch(toggleFavoriteStatus(cityId)) },\r\n        loadFavoritesFromStorage: () => { dispatch(loadFavoritesFromStorage()) }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SingleFavoriteItem = (props) => {\r\n    let cityName = props.composedInfo.cityInfo.cityName;\r\n    let cityId = props.composedInfo.cityInfo.cityId;\r\n    let countryName = props.composedInfo.cityInfo.countryName;\r\n\r\n    let temperatureImperialUnit = props.composedInfo.currentWeather.temperatureImperialUnit;\r\n    let temperatureImperialVal = props.composedInfo.currentWeather.temperatureImperialVal;\r\n    let weatherDescription = props.composedInfo.currentWeather.weatherDescription;\r\n    let weatherIcon = props.composedInfo.currentWeather.weatherIcon;\r\n    if (weatherIcon < 10) weatherIcon = `0${weatherIcon}`\r\n\r\n    const CURRENT_WEATHER_URL = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${weatherIcon}-s.png`;\r\n\r\n    return (\r\n        <Link to={'/' + cityId}>\r\n            <div className=\"card\" >\r\n                <div className=\"card-content\">\r\n                    <div>{cityName}, {countryName}</div>\r\n                    <div>{temperatureImperialVal}, {temperatureImperialUnit}</div>\r\n                    <img src={CURRENT_WEATHER_URL} title={weatherDescription} alt={weatherDescription} />\r\n                    <div>{weatherDescription}</div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default SingleFavoriteItem","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SingleFavoriteItem from './SingleFavoriteItem'\r\n\r\nclass FavoriteList extends Component {\r\n    render() {\r\n        const favoritesInfo = [];\r\n\r\n        //composing an object that have cityInfo and weater (only if favorite)\r\n        if (this.props.citiesInfo.length) {\r\n            this.props.citiesInfo.forEach((cityInfo) => {\r\n                if (this.props.currentWeather.length) {\r\n                    this.props.currentWeather.forEach(currentWeather => {\r\n                        if (currentWeather.cityId === cityInfo.cityId && cityInfo.isFavorite) {\r\n                            favoritesInfo.push({ cityInfo, currentWeather })\r\n                        }\r\n                    })\r\n                 }\r\n            })\r\n        }\r\n\r\n        const favoritesInfoToRender = favoritesInfo.length ? (\r\n            favoritesInfo.map((composedInfo, index) => {\r\n                return (\r\n                    <SingleFavoriteItem composedInfo={composedInfo} key={index} />\r\n                )\r\n            })\r\n        ) : (<div className=\"\" >No Favorites Selected </div>)\r\n       \r\n        return (\r\n            <ul className=\"forcast-list center\">          \r\n                    {favoritesInfoToRender}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesInfo: state.location.citiesInfo,\r\n        currentWeather: state.weather.currentWeather\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FavoriteList)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport FavoriteList from './FavoriteList'\r\nimport { getCityInfo, toggleFavoriteStatus } from '../store/actions/locationActions'\r\nimport { getWeather } from '../store/actions/weatherActions'\r\n\r\n// const Favorites = (props) =>{\r\nclass Favorites extends Component {\r\n  componentDidMount() {\r\n    //sending request for cityInfo \r\n    if (this.props.favorites) this.props.favorites.forEach((favoriteCityName) => {\r\n      //check if iterated city isCurrent\r\n      let cityInfo = this.props.citiesInfo.find(cityInfo => cityInfo.cityName === favoriteCityName);\r\n      if (!cityInfo) {\r\n        this.props.getCityInfo(favoriteCityName, true, false)\r\n      }\r\n      else {//city in cityInfo Array, not marked as favorite, but is in the favorites\r\n        toggleFavoriteStatus(favoriteCityName)\r\n        this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n      }\r\n    })\r\n  }\r\n  //sending request for forcast if cityInfo is a favorite\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.props.citiesInfo.forEach((cityInfo) => {\r\n      //if cityInfo exists and it is favorite\r\n      let city = this.props.favorites.find(cityName => cityInfo.cityName === cityName)\r\n      if (city) {\r\n        //if city dont have weather, request one\r\n        if (!this.props.weather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        else {\r\n          let selectedWeather = this.props.weather.currentWeather.find(weather => weather.cityId === cityInfo.cityId)\r\n          if (!selectedWeather) this.props.getWeather(cityInfo.cityId, cityInfo.isCurrent)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <FavoriteList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    citiesInfo: state.location.citiesInfo,\r\n    favorites: state.location.favorites,\r\n    currentWeather: state.location.currentWeather\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCityInfo: (cityName, isFavorite, isCurrent) => dispatch(getCityInfo(cityName, isFavorite, isCurrent)),\r\n    getWeather: (cityId, isCurrent) => { dispatch(getWeather(cityId, isCurrent)) },\r\n    toggleFavoriteStatus: (cityName) => { dispatch(toggleFavoriteStatus(cityName)) },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites)","import React from 'react';\nimport Navbar from './cmps/Navbar'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from './cmps/Home';\nimport Favorites from './cmps/Favorites';\nimport { ToastContainer } from 'react-toastify';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <ToastContainer />\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/favorites\" component={Favorites} />\n          <Route path=\"/:cityId\" component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { saveToStorage } from '../../services/utilService'\r\n\r\nconst initState = {\r\n    favorites: [],//City names\r\n    isFavoritesLoaded: false,\r\n    citiesInfo: [],\r\n    defaultCityName: 'Tel Aviv',\r\n    error: ''\r\n}\r\n\r\nconst locationReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'LOAD_FAVORITES_FROM_STORAGE':\r\n            {\r\n                return {\r\n                    ...state,\r\n                    isFavoritesLoaded: true,\r\n                    favorites: action.favorites,\r\n                    error: ''\r\n                }\r\n            }\r\n        case 'SET_CITY_INFO':\r\n            {\r\n                //check if cityInfo exists\r\n                let cities = [...state.citiesInfo];\r\n\r\n                //if arrived city isCurrent, set all cities to NOT current\r\n                if (action.cityInfo.isCurrent) cities.forEach(city => city.isCurrent = false)\r\n\r\n                //check if the arrived city is in the array\r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityInfo.cityId);\r\n                if (!selectedCity) {\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities, action.cityInfo],\r\n                        error: ''\r\n                    }\r\n                } else {\r\n                    selectedCity.isCurrent = action.cityInfo.isCurrent;\r\n                    return {\r\n                        ...state,\r\n                        citiesInfo: [...cities],\r\n                        error: ''\r\n                    }\r\n                }\r\n            }\r\n        case 'TOGGLE_FAVORITE_STATUS':\r\n            {\r\n                let cities = [...state.citiesInfo];\r\n                //change the FAVORITE attribute \r\n                let selectedCity = cities.find(cityInfo => cityInfo.cityId === action.cityId);\r\n                selectedCity.isFavorite = !selectedCity.isFavorite;\r\n\r\n                //check if cityName exists in the favorites\r\n                let favoriteNames = [...state.favorites];\r\n                let cityIndex = favoriteNames.indexOf(selectedCity.cityName);\r\n\r\n                //if it has been selected as favorite\r\n                if (selectedCity.isFavorite) {\r\n                    //insert to favorites if not exists\r\n                    if (cityIndex < 0) favoriteNames = [...favoriteNames, selectedCity.cityName];\r\n                } else {\r\n                    //if it has been selected as NOT favorite\r\n                    if (cityIndex >= 0) favoriteNames.splice(cityIndex, 1);\r\n                }\r\n                saveToStorage('favorites', favoriteNames)\r\n                return {\r\n                    ...state,\r\n                    favorites: favoriteNames,\r\n                    citiesInfo: [...cities],\r\n                    error: ''\r\n                }\r\n            }\r\n        case 'LOCATION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default locationReducer","\r\nconst initState = {\r\n    forcast: [],\r\n    forcastDescription: '',\r\n    currentWeather: [],\r\n    error: '',\r\n}\r\nconst weatherReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_FORCAST':\r\n            return {\r\n                ...state,\r\n                forcast: action.forcast.DailyForecasts,\r\n                forcastDescription: action.forcast.Headline.Text,\r\n                error:''\r\n            }\r\n        case 'SET_WEATHER':\r\n            {\r\n                let weatherList = [...state.currentWeather];\r\n                let isExists = false;\r\n                let updatedWeather = weatherList.map(weather => {\r\n                    if (weather.cityId === action.weather.cityId) {\r\n                        isExists = true;\r\n                        return action.weather;\r\n                    }\r\n                    else return weather;\r\n                })\r\n                if (isExists) {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...updatedWeather],\r\n                        error:''\r\n                    }\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        currentWeather: [...state.currentWeather, action.weather],\r\n                        error:''\r\n                    }\r\n                }\r\n            }\r\n        case 'WEATHER_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer","import locationReducer from './locationReducer'\r\nimport weatherReducer from './weatherReducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weatherReducer,\r\n    location: locationReducer\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/libs/animate.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore,applyMiddleware,compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from  './store/reducers/rootReducer'\n//enable async operation and call external services/db from within the action creator.\n//instead of returning an action, we will return a function, thus hulting the dispach operation\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\n// const store = createStore(rootReducer,applyMiddleware(thunk),composeWithDevTools());\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        composeWithDevTools()\n    ));\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}